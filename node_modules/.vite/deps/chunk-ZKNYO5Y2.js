import {
  __esm,
  __export
} from "./chunk-CEQRFMJQ.js";

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var init_objectWithoutPropertiesLoose = __esm({
  "node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var init_extends = __esm({
  "node_modules/@babel/runtime/helpers/esm/extends.js"() {
  }
});

// node_modules/@frontegg/rest-api/ContextHolder/index.js
var ContextHolder, FronteggContext;
var init_ContextHolder = __esm({
  "node_modules/@frontegg/rest-api/ContextHolder/index.js"() {
    ContextHolder = class _ContextHolder {
      constructor() {
        this.context = null;
        this.accessToken = null;
        this.user = null;
        this.requestSource = null;
        this.onRedirectTo = (path) => window.location.href = path;
        this.logout = () => window.location.href = "/account/logout";
        this.entitlementsOptions = null;
        this.appName = null;
        this.sessionContext = void 0;
      }
      static getInstance() {
        if (!_ContextHolder.instance) {
          _ContextHolder.instance = new _ContextHolder();
        }
        return _ContextHolder.instance;
      }
      static setContext(context) {
        _ContextHolder.getInstance().context = context;
      }
      static setAccessToken(accessToken) {
        _ContextHolder.getInstance().accessToken = accessToken;
      }
      static setUser(user) {
        _ContextHolder.getInstance().user = user;
      }
      static setRequestSource(requestSource) {
        _ContextHolder.getInstance().requestSource = requestSource;
      }
      static setOnRedirectTo(onRedirectTo) {
        _ContextHolder.getInstance().onRedirectTo = onRedirectTo;
      }
      static setLogout(logout2, logoutUrl) {
        _ContextHolder.getInstance().logout = (callback) => {
          if (!callback) {
            _ContextHolder.onRedirectTo(logoutUrl);
          } else {
            logout2(callback);
          }
        };
      }
      static setEntitlementsOptions(entitlementsOptions) {
        _ContextHolder.getInstance().entitlementsOptions = entitlementsOptions;
      }
      static setSessionContext(sessionContext) {
        const instance = _ContextHolder.getInstance();
        instance.sessionContext = sessionContext;
      }
      static setAppName(appName) {
        _ContextHolder.getInstance().appName = appName;
      }
      static getContext() {
        var _ContextHolder$getIns;
        return (_ContextHolder$getIns = _ContextHolder.getInstance().context) != null ? _ContextHolder$getIns : {
          baseUrl: window.location.href,
          tokenResolver: () => "my-authentication-token",
          logLevel: "error"
        };
      }
      static getAccessToken() {
        return _ContextHolder.getInstance().accessToken;
      }
      static getRequestSource() {
        return _ContextHolder.getInstance().requestSource;
      }
      static getUser() {
        return _ContextHolder.getInstance().user;
      }
      static onRedirectTo(path, opts) {
        return _ContextHolder.getInstance().onRedirectTo(path, opts);
      }
      static logout(callback) {
        return _ContextHolder.getInstance().logout(callback);
      }
      static shouldLoadEntitlements() {
        var _ContextHolder$getIns2;
        return ((_ContextHolder$getIns2 = _ContextHolder.getInstance().entitlementsOptions) == null ? void 0 : _ContextHolder$getIns2.enabled) || false;
      }
      static isSessionPerTenantEnabled() {
        var _ContextHolder$getIns3;
        return ((_ContextHolder$getIns3 = _ContextHolder.getInstance().sessionContext) == null ? void 0 : _ContextHolder$getIns3.enableSessionPerTenant) || false;
      }
      static getAppName() {
        return _ContextHolder.getInstance().appName;
      }
    };
    ContextHolder.instance = void 0;
    FronteggContext = {
      getContext: () => ContextHolder.getContext(),
      getAccessToken: () => ContextHolder.getAccessToken(),
      getUser: () => ContextHolder.getUser(),
      onRedirectTo: (path, opts) => ContextHolder.onRedirectTo(path, opts),
      logout: (callback) => ContextHolder.logout(callback)
    };
  }
});

// node_modules/@frontegg/rest-api/interfaces.js
var fronteggHeaders, RequestSource, FronteggFrameworks, PaginationOrderEnum;
var init_interfaces = __esm({
  "node_modules/@frontegg/rest-api/interfaces.js"() {
    fronteggHeaders = {
      frameWork: "x-frontegg-framework",
      fronteggSdkVersion: "x-frontegg-sdk",
      contentType: "Content-Type",
      source: "frontegg-source",
      scopedTenant: "frontegg-scoped-tenant"
    };
    (function(RequestSource2) {
      RequestSource2["AdminPortal"] = "admin-portal";
      RequestSource2["LoginBox"] = "login-box";
    })(RequestSource || (RequestSource = {}));
    (function(FronteggFrameworks2) {
      FronteggFrameworks2["Nextjs"] = "nextjs";
      FronteggFrameworks2["React"] = "react";
      FronteggFrameworks2["Angular"] = "angular";
      FronteggFrameworks2["Vuejs"] = "vuejs";
      FronteggFrameworks2["Flutter"] = "flutter";
      FronteggFrameworks2["Ios"] = "ios";
      FronteggFrameworks2["Android"] = "android";
      FronteggFrameworks2["Vanillajs"] = "vanillajs";
    })(FronteggFrameworks || (FronteggFrameworks = {}));
    (function(PaginationOrderEnum2) {
      PaginationOrderEnum2["ASC"] = "ASC";
      PaginationOrderEnum2["DESC"] = "DESC";
    })(PaginationOrderEnum || (PaginationOrderEnum = {}));
  }
});

// node_modules/@frontegg/rest-api/error.js
var FronteggApiError;
var init_error = __esm({
  "node_modules/@frontegg/rest-api/error.js"() {
    FronteggApiError = class extends Error {
      constructor(message, statusCode) {
        super(message);
        this._statusCode = void 0;
        this._statusCode = statusCode;
      }
      get statusCode() {
        return this._statusCode;
      }
    };
  }
});

// node_modules/@frontegg/rest-api/constants.js
var urls, GENERIC_ERROR_MESSAGE;
var init_constants = __esm({
  "node_modules/@frontegg/rest-api/constants.js"() {
    urls = {
      vendor: "/vendors",
      identity: {
        webAuthnDevices: {
          v1: "/identity/resources/users/webauthn/v1/devices"
        },
        auth: {
          v1: "/identity/resources/auth/v1",
          v2: "/identity/resources/auth/v2"
        },
        users: {
          v1: "/identity/resources/users/v1",
          v2: "/identity/resources/users/v2",
          v3: "/identity/resources/users/v3",
          roles: {
            v3: "/identity/resources/users/v3/roles"
          },
          groups: {
            v3: "/identity/resources/users/v3/groups"
          },
          tenants: {
            me: {
              v1: "/identity/resources/users/v1/me/tenants",
              v3: "/identity/resources/users/v3/me/tenants"
            }
          },
          apiTokens: {
            v1: "/identity/resources/users/api-tokens/v1"
          },
          accessTokens: {
            v1: "/identity/resources/users/access-tokens/v1"
          },
          sessions: {
            v1: "/identity/resources/users/sessions/v1",
            currentUser: {
              v1: "/identity/resources/users/sessions/v1/me"
            },
            configurations: {
              v1: "/identity/resources/configurations/sessions/v1"
            }
          },
          invitation: {
            resendAll: {
              v1: "/identity/resources/users/v1/invitation/reset/all"
            }
          },
          passwords: {
            resetBreachedPasswords: {
              v1: "/identity/resources/users/v1/passwords/breached/reset/bulk"
            }
          },
          authorization: {
            v1: "/identity/resources/users/v1/me/authorization"
          },
          temporary: {
            v1: "/identity/resources/users/temporary/v1",
            configuration: {
              v1: "/identity/resources/users/temporary/v1/configuration"
            }
          }
        },
        configurations: {
          v1: "/identity/resources/configurations/v1"
        },
        restrictions: {
          emailDomain: {
            v1: "/identity/resources/configurations/restrictions/v1/email-domain"
          },
          ip: {
            v1: "/identity/resources/configurations/v1/restrictions/ip"
          }
        },
        sso: {
          v1: "/identity/resources/sso/v1",
          v2: "/identity/resources/sso/v2",
          custom: {
            v1: "/identity/resources/sso/custom/v1"
          }
        },
        permissions: {
          v1: "/identity/resources/permissions/v1"
        },
        tenants: {
          apiTokens: {
            v1: "/identity/resources/tenants/api-tokens/v1",
            v2: "/identity/resources/tenants/api-tokens/v2"
          },
          accessTokens: {
            v1: "/identity/resources/tenants/access-tokens/v1"
          },
          invites: {
            user: {
              v1: "/identity/resources/tenants/invites/v1/user"
            },
            verify: {
              v1: "/identity/resources/tenants/invites/v1/verify"
            },
            configuration: {
              v1: "/identity/resources/tenants/invites/v1/configuration"
            }
          },
          users: {
            v1: "/identity/resources/tenants/users/v1"
          }
        },
        roles: {
          v1: "/identity/resources/roles/v1",
          v2: "/identity/resources/roles/v2"
        },
        subTenants: {
          v1: "/identity/resources/sub-tenants/users/v1",
          v2: "/identity/resources/sub-tenants/users/v2"
        },
        impersonate: {
          v1: "/identity/resources/impersonation/v1"
        },
        groups: {
          v1: "/identity/resources/groups/v1",
          configurations: {
            v1: "/identity/resources/groups/v1/config"
          },
          getByIds: {
            v1: "/identity/resources/groups/v1/bulkGet"
          }
        },
        phoneNumbers: {
          v1: "/identity/resources/users/phone-numbers/v1"
        }
      },
      team: {
        sso: {
          v1: "/team/resources/sso/v1",
          v2: "/team/resources/sso/v2"
        },
        members: {
          v1: "/team/resources/members/v1"
        },
        roles: {
          v1: "/team/resources/roles/v1"
        },
        stats: {
          v1: "/team/resources/stats/v1"
        },
        profile: {
          v1: "/team/resources/profile"
        }
      },
      tenants: {
        accountSettings: {
          v1: "/tenants/resources/account-settings/v1"
        },
        hierarchy: {
          v1: "/tenants/resources/hierarchy/v1",
          tree: {
            v1: "/tenants/resources/hierarchy/v1/tree"
          },
          parents: {
            v1: "/tenants/resources/hierarchy/v1/parents"
          },
          v2: "/tenants/resources/hierarchy/v2",
          metadata: {
            v2: "/tenants/resources/hierarchy/v2/metadata"
          }
        },
        subTenants: {
          v1: "/tenants/resources/sub-tenants/v1"
        }
      },
      integrations: {
        configurations: {
          v1: "/integrations/resources/configurations/v1",
          v2: "/integrations/resources/configurations/v2"
        }
      },
      subscriptions: {
        billing: {
          subscriptions: {
            v1: "/subscriptions/resources/billing/subscriptions/v1"
          },
          plans: {
            v1: "/subscriptions/resources/billing/plans/v1"
          },
          invoices: {
            v1: "/subscriptions/resources/billing/invoices/v1"
          },
          paymentMethods: {
            v1: "/subscriptions/resources/billing/payment-methods/v1"
          },
          summaries: {
            v1: "/subscriptions/resources/billing/summaries/v1"
          },
          tenantConfiguration: {
            v1: "/subscriptions/resources/billing/tenant-configurations/v1"
          },
          configurations: {
            vendorPublicConfigurations: {
              v1: "/subscriptions/resources/billing/configurations/vendor-public-configurations/v1"
            }
          },
          paymentProviders: {
            stripe: {
              customers: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/customers/v1"
              },
              publicConfigurations: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/public-configurations/v1"
              },
              subscriptions: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/subscriptions/v1"
              },
              setupIntents: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/setup-intents/v1"
              }
            }
          }
        },
        paymentProviders: {
          v1: "/subscriptions/resources/payment-providers/v1"
        },
        managedSubscriptions: {
          v1: "/subscriptions/resources/subscriptions/v1"
        }
      },
      reports: {
        service: {
          v1: "/reports/resources/reports/v1",
          v2: "/reports/resources/reports/v2"
        },
        trigger: {
          v1: "/reports/engine/resources/triggers/v1"
        }
      },
      notifications: {
        v1: "/notification"
      },
      audits: {
        v1: "/audits"
      },
      events: {
        configurations: {
          v1: "/event/resources/configurations/v1"
        }
      },
      webhooks: {
        v1: "/webhook"
      },
      oauth: {
        v1: "/oauth"
      },
      featureFlags: {
        v1: "/flags"
      },
      directory: {
        v1: "/directory/resources/v1/configurations/scim2",
        temp: "/directory/resources/scim/temp"
      },
      entitlements: {
        v1: "/entitlements/api/v1/user-entitlements",
        v2: "/entitlements/api/v2/user-entitlements"
      },
      securityCenter: {
        recommendations: {
          v1: "/security-center/resources/recommendations/v1"
        },
        insights: {
          v1: "/security-center/resources/insights/v1"
        }
      }
    };
    GENERIC_ERROR_MESSAGE = `We're facing some difficulties, Please try again`;
  }
});

// node_modules/@frontegg/rest-api/fetch.js
var fetch_exports = {};
__export(fetch_exports, {
  Delete: () => Delete,
  Get: () => Get,
  Patch: () => Patch,
  Post: () => Post,
  PostDownload: () => PostDownload,
  Put: () => Put,
  extractHeadersFromOptions: () => extractHeadersFromOptions,
  getBaseUrl: () => getBaseUrl,
  getMetadataHeaders: () => getMetadataHeaders,
  getScopedTenant: () => getScopedTenant
});
function getBaseUrl(context, url, withFronteggPrefix = true) {
  let baseUrl;
  if (typeof context.baseUrl === "function") {
    baseUrl = context.baseUrl(url);
  } else {
    baseUrl = context.baseUrl;
  }
  const prefix = context.urlPrefix || "frontegg";
  const removePrefix = prefix === "frontegg" && !withFronteggPrefix;
  if (!baseUrl.endsWith("/")) {
    baseUrl += "/";
  }
  if (!baseUrl.endsWith(prefix) && !removePrefix) {
    baseUrl += prefix;
  }
  return baseUrl;
}
async function prepareUrl(context, url, params) {
  const baseUrl = getBaseUrl(context, url);
  const paramsToSend = await buildQueryParams(context, params);
  let finalUrl = url.startsWith("http") ? url : `${baseUrl}${url}`;
  const hasKeys = Object.keys(paramsToSend).length > 0;
  if (paramsToSend && hasKeys) {
    const urlParams = new URLSearchParams(paramsToSend);
    finalUrl += `?${urlParams}`;
  }
  return finalUrl;
}
function getMetadataHeaders(context) {
  var _context$metadataHead, _context$metadataHead2;
  const headers = {};
  if (context != null && (_context$metadataHead = context.metadataHeaders) != null && _context$metadataHead.fronteggSdkVersion) {
    headers[fronteggHeaders.fronteggSdkVersion] = context.metadataHeaders.fronteggSdkVersion;
  }
  if (context != null && (_context$metadataHead2 = context.metadataHeaders) != null && _context$metadataHead2.framework) {
    headers[fronteggHeaders.frameWork] = context.metadataHeaders.framework;
  }
  return headers;
}
function getScopedTenant() {
  const urlParams = new URLSearchParams(window.location.search);
  const scopedTenant = urlParams.get("tenantId");
  if (scopedTenant) {
    return scopedTenant;
  }
  return null;
}
async function buildRequestHeaders(context, contentType) {
  var _context$tokenResolve;
  const headers = getMetadataHeaders(context);
  const authToken = await ((_context$tokenResolve = context == null ? void 0 : context.tokenResolver) != null ? _context$tokenResolve : ContextHolder.getAccessToken)();
  const requestSource = ContextHolder.getRequestSource();
  const scopedTenant = getScopedTenant();
  if (contentType) {
    headers[fronteggHeaders.contentType] = contentType;
  }
  if (requestSource) {
    headers[fronteggHeaders.source] = requestSource;
  }
  if (authToken) {
    headers.Authorization = `Bearer ${authToken}`;
  }
  if (scopedTenant) {
    headers[fronteggHeaders.scopedTenant] = scopedTenant;
  }
  for (const additionalHeader of await getAdditionalHeaders(context)) {
    headers[`${additionalHeader.key}`] = `${additionalHeader.value}`;
  }
  return headers;
}
async function buildQueryParams(context, params) {
  if (!params) {
    params = {};
  }
  const additionalQueryParams = await getAdditionalQueryParams(context);
  for (const queryParam of additionalQueryParams) {
    params[queryParam.key] = queryParam.value;
  }
  const keys = Object.keys(params);
  for (const key of keys) {
    const value = params[key];
    params[key] = typeof value === "object" ? JSON.stringify(value) : value;
  }
  return params;
}
async function getAdditionalQueryParams(context) {
  let output = [];
  if (context.additionalQueryParamsResolver) {
    output = await context.additionalQueryParamsResolver();
  }
  return output;
}
async function getAdditionalHeaders(context) {
  let output = [];
  if (context.additionalHeadersResolver) {
    output = await context.additionalHeadersResolver();
  }
  if (context.tenantResolver) {
    const resolvedTenantResult = await context.tenantResolver();
    if (!!(resolvedTenantResult != null && resolvedTenantResult.tenant)) {
      output.push({
        key: "frontegg-login-alias",
        value: resolvedTenantResult.tenant
      });
    }
  }
  return output;
}
var sendRequest, Get, Post, Patch, Put, Delete, PostDownload, extractHeadersFromOptions;
var init_fetch = __esm({
  "node_modules/@frontegg/rest-api/fetch.js"() {
    init_extends();
    init_ContextHolder();
    init_interfaces();
    init_error();
    init_constants();
    sendRequest = async (opts) => {
      var _opts$method, _ref, _opts$credentials;
      const context = ContextHolder.getContext();
      const headers = await buildRequestHeaders(context, opts.contentType);
      const url = await prepareUrl(context, opts.url, opts.params);
      const response = await fetch(url, {
        body: opts.body ? opts.contentType === "application/json" ? JSON.stringify(opts.body) : opts.body : null,
        method: (_opts$method = opts.method) != null ? _opts$method : "GET",
        headers: _extends({}, headers, opts.headers),
        credentials: (_ref = (_opts$credentials = opts.credentials) != null ? _opts$credentials : context.requestCredentials) != null ? _ref : "same-origin"
      });
      if (response.status === 302) {
        window.location.href = await response.text();
        return new Promise(() => {
        });
      }
      if (!response.ok) {
        var _context$logLevel, _context$logLevel2;
        if (response.status === 413) {
          throw new FronteggApiError("Error request is too large", response.status);
        }
        let errorMessage;
        let isJsonResponse = true;
        try {
          errorMessage = await response.text();
          errorMessage = JSON.parse(errorMessage);
        } catch (e) {
          isJsonResponse = false;
        }
        if (errorMessage.errors) {
          errorMessage = errorMessage.errors.join(", ");
        } else if (typeof errorMessage !== "string") {
          errorMessage = `Error ${response.status} - ${response.statusText}`;
        }
        if (response.status >= 400 && response.status < 500 && ["warn"].includes((_context$logLevel = context.logLevel) != null ? _context$logLevel : ""))
          console.warn(errorMessage);
        else if (response.status === 500 && ["warn", "error"].includes((_context$logLevel2 = context.logLevel) != null ? _context$logLevel2 : ""))
          console.error(errorMessage);
        throw new FronteggApiError(isJsonResponse ? errorMessage : GENERIC_ERROR_MESSAGE, response.status);
      }
      if (!opts.responseType || opts.responseType === "json") {
        try {
          return await response.json();
        } catch (e) {
          return {};
        }
      } else if (opts.responseType === "blob") {
        const {
          outputFileName
        } = opts.params;
        return await response.blob().then((blob) => URL.createObjectURL(blob)).then((url2) => {
          const tempLink = document.createElement("a");
          tempLink.href = url2;
          tempLink.setAttribute("download", outputFileName || "output");
          tempLink.click();
        });
      } else {
        return await response.text();
      }
    };
    Get = async (url, params, opts) => sendRequest(_extends({
      url,
      method: "GET",
      contentType: "application/json",
      params
    }, opts));
    Post = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "POST",
      contentType: "application/json",
      body
    }, opts));
    Patch = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "PATCH",
      contentType: "application/json",
      body
    }, opts));
    Put = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "PUT",
      contentType: "application/json",
      body
    }, opts));
    Delete = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "DELETE",
      contentType: "application/json",
      body
    }, opts));
    PostDownload = async (url, body, params, opts) => sendRequest(_extends({
      url,
      method: "POST",
      contentType: "application/json",
      responseType: "blob",
      body,
      params
    }, opts));
    extractHeadersFromOptions = (options = {}) => _extends({}, options.jwt ? {
      Authorization: options.jwt
    } : {});
  }
});

// node_modules/@frontegg/rest-api/auth/constants.js
var FRONTEGG_SEPARATE_TABS_BY_TENANT, USE_CURRENT_USER_TENANTS_V1_ENDPOINT_FF, USE_ENTITLEMENTS_V2_ENDPOINT_FF;
var init_constants2 = __esm({
  "node_modules/@frontegg/rest-api/auth/constants.js"() {
    FRONTEGG_SEPARATE_TABS_BY_TENANT = "FRONTEGG_SEPARATE_TABS_BY_TENANT";
    USE_CURRENT_USER_TENANTS_V1_ENDPOINT_FF = "admin_portal_use_current_user_tenants_v1_endpoint";
    USE_ENTITLEMENTS_V2_ENDPOINT_FF = "admin_portal_use_entitlements_v2_endpoint";
  }
});

// node_modules/@frontegg/rest-api/feature-flags/index.js
var feature_flags_exports = {};
__export(feature_flags_exports, {
  FeatureFlags: () => FeatureFlags,
  loadFeatureFlags: () => loadFeatureFlags
});
async function loadFeatureFlags() {
  return Get(urls.featureFlags.v1);
}
var defaultFeatureFlags, FeatureFlags;
var init_feature_flags = __esm({
  "node_modules/@frontegg/rest-api/feature-flags/index.js"() {
    init_extends();
    init_constants();
    init_fetch();
    defaultFeatureFlags = {
      flags: {}
    };
    FeatureFlags = class _FeatureFlags {
      constructor() {
        var _defaultFeatureFlags$;
        this._flags = {};
        this._flags = (_defaultFeatureFlags$ = defaultFeatureFlags.flags) != null ? _defaultFeatureFlags$ : {};
      }
      static getInstance(name = "default") {
        return this._instances[name];
      }
      static set(featureFlags, name = "default") {
        const featureFlagsInstance = new _FeatureFlags();
        featureFlagsInstance.set(featureFlags);
        _FeatureFlags._instances[name] = featureFlagsInstance;
        return featureFlagsInstance;
      }
      static getFeatureFlags(flags, name) {
        const featureFlagsInstance = this.getInstance(name);
        return flags.map((flag) => (featureFlagsInstance == null ? void 0 : featureFlagsInstance._flags[flag]) === "on");
      }
      get flags() {
        var _this$flags;
        return (_this$flags = this.flags) != null ? _this$flags : {};
      }
      set(featureFlags) {
        var _defaultFeatureFlags$2;
        this._flags = _extends({}, (_defaultFeatureFlags$2 = defaultFeatureFlags == null ? void 0 : defaultFeatureFlags.flags) != null ? _defaultFeatureFlags$2 : {}, featureFlags != null ? featureFlags : {});
      }
    };
    FeatureFlags._instances = {};
  }
});

// node_modules/@frontegg/rest-api/users/index.js
var users_exports = {};
__export(users_exports, {
  GetUserJwt: () => GetUserJwt,
  getCurrentUserTenantsV1: () => getCurrentUserTenantsV1,
  getCurrentUserTenantsV3: () => getCurrentUserTenantsV3,
  getUsersGroups: () => getUsersGroups,
  getUsersRoles: () => getUsersRoles,
  getUsersV2: () => getUsersV2,
  getUsersV3: () => getUsersV3,
  sendResetBreachedPasswordEmails: () => sendResetBreachedPasswordEmails,
  updateUserProfileV2: () => updateUserProfileV2
});
async function GetUserJwt(body) {
  return Post(`${urls.identity.users.v3}/me/token`, body);
}
async function getUsersV2(queryParams, options) {
  return Get(urls.identity.users.v2, queryParams, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getUsersV3(queryParams, options) {
  return Get(urls.identity.users.v3, queryParams, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getUsersRoles(queryParams, options) {
  return Get(urls.identity.users.roles.v3, _extends({}, queryParams, {
    ids: queryParams.ids.join(",")
  }), {
    headers: extractHeadersFromOptions(options)
  });
}
async function getUsersGroups(queryParams, options) {
  return Get(urls.identity.users.groups.v3, _extends({}, queryParams, {
    ids: queryParams.ids.join(",")
  }), {
    headers: extractHeadersFromOptions(options)
  });
}
async function getCurrentUserTenantsV3(options) {
  return Get(urls.identity.users.tenants.me.v3, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getCurrentUserTenantsV1(options) {
  return Get(urls.identity.users.tenants.me.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function sendResetBreachedPasswordEmails() {
  return Post(urls.identity.users.passwords.resetBreachedPasswords.v1);
}
async function updateUserProfileV2(body) {
  return Put(`${urls.identity.users.v2}/me`, body);
}
var init_users = __esm({
  "node_modules/@frontegg/rest-api/users/index.js"() {
    init_extends();
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/auth/utils.js
async function executeConditionalPromise({
  shouldLoad,
  action
}) {
  if (!shouldLoad)
    return;
  return await action();
}
function setTabTenantInSessionStorage(tenantId) {
  if (!tenantId) {
    return;
  }
  sessionStorage.setItem(FRONTEGG_SEPARATE_TABS_BY_TENANT, tenantId);
}
function removeTabTenantFromSessionStorage() {
  sessionStorage.removeItem(FRONTEGG_SEPARATE_TABS_BY_TENANT);
}
function getTabTenantFromSessionStorage() {
  if (!ContextHolder.isSessionPerTenantEnabled()) {
    return null;
  }
  return sessionStorage.getItem(FRONTEGG_SEPARATE_TABS_BY_TENANT);
}
function getCurrentUserTenantsFunction() {
  const [useCurrentUserTenantsV1] = FeatureFlags.getFeatureFlags([USE_CURRENT_USER_TENANTS_V1_ENDPOINT_FF], ContextHolder.getAppName() || "");
  if (ContextHolder.isSessionPerTenantEnabled()) {
    return getCurrentUserTenantsV1;
  }
  return useCurrentUserTenantsV1 ? getCurrentUserTenantsV1 : getCurrentUserTenantsV3;
}
var init_utils = __esm({
  "node_modules/@frontegg/rest-api/auth/utils.js"() {
    init_ContextHolder();
    init_constants2();
    init_feature_flags();
    init_users();
    init_constants2();
  }
});

// node_modules/@frontegg/rest-api/tenants/index.js
var tenants_exports = {};
__export(tenants_exports, {
  getHierarchyMetadata: () => getHierarchyMetadata,
  getParentTenants: () => getParentTenants,
  getParentTenantsById: () => getParentTenantsById,
  getSubTenants: () => getSubTenants,
  getSubTenantsAsTree: () => getSubTenantsAsTree,
  getTenants: () => getTenants,
  getTenantsUsersCount: () => getTenantsUsersCount,
  searchSubTenants: () => searchSubTenants,
  switchTenant: () => switchTenant
});
async function switchTenant(body) {
  if (ContextHolder.isSessionPerTenantEnabled()) {
    setTabTenantInSessionStorage(body.tenantId);
  }
  return Put(`${urls.identity.users.v1}/tenant`, body);
}
async function getTenants() {
  return Get(`${urls.identity.users.v2}/me/tenants`);
}
async function getSubTenants(options) {
  return Get(urls.tenants.hierarchy.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getSubTenantsAsTree(options) {
  return Get(urls.tenants.hierarchy.tree.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getParentTenants(options) {
  return Get(urls.tenants.hierarchy.parents.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getParentTenantsById(tenantId, options) {
  return Get(`${urls.tenants.hierarchy.parents.v1}/${tenantId}`, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getTenantsUsersCount(body, options) {
  return Post(`${urls.identity.tenants.users.v1}/count`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function searchSubTenants(params, options) {
  return Get(urls.tenants.hierarchy.v2, params, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getHierarchyMetadata(params, options) {
  return Get(urls.tenants.hierarchy.metadata.v2, _extends({}, params, {
    _tenantIds: params._tenantIds.join(",")
  }), {
    headers: extractHeadersFromOptions(options)
  });
}
var init_tenants = __esm({
  "node_modules/@frontegg/rest-api/tenants/index.js"() {
    init_extends();
    init_fetch();
    init_constants();
    init_utils();
    init_ContextHolder();
  }
});

// node_modules/@frontegg/rest-api/auth/secutiry-poilicy/index.js
async function getGlobalSecurityPolicy() {
  return Get(urls.identity.configurations.v1);
}
async function getMfaPolicy() {
  return Get(`${urls.identity.configurations.v1}/mfa-policy`);
}
async function getVendorMfaPolicy() {
  return Get(`${urls.identity.configurations.v1}/mfa-policy/vendor`);
}
async function saveMfaPolicy(body) {
  if (body.id) {
    return Patch(`${urls.identity.configurations.v1}/mfa-policy`, body);
  } else {
    return Post(`${urls.identity.configurations.v1}/mfa-policy`, body);
  }
}
async function getLockoutPolicy() {
  return Get(`${urls.identity.configurations.v1}/lockout-policy`);
}
async function getVendorLockoutPolicy() {
  return Get(`${urls.identity.configurations.v1}/lockout-policy/vendor`);
}
async function saveLockoutPolicy(body) {
  if (body.id) {
    return Patch(`${urls.identity.configurations.v1}/lockout-policy`, body);
  } else {
    return Post(`${urls.identity.configurations.v1}/lockout-policy`, body);
  }
}
async function getCaptchaPolicy() {
  try {
    return await Get(`${urls.identity.configurations.v1}/captcha-policy/public`);
  } catch {
    return null;
  }
}
async function getPasswordHistoryPolicy() {
  return Get(`${urls.identity.configurations.v1}/password-history-policy`);
}
async function getVendorPasswordHistoryPolicy() {
  return Get(`${urls.identity.configurations.v1}/password-history-policy/vendor`);
}
async function savePasswordHistoryPolicy(body) {
  if (body.id) {
    return Patch(`${urls.identity.configurations.v1}/password-history-policy`, body);
  } else {
    return Post(`${urls.identity.configurations.v1}/password-history-policy`, body);
  }
}
async function getPasswordConfigPolicy() {
  return Get(`${urls.identity.configurations.v1}/password`);
}
async function getDomainRestrictions() {
  return Get(`${urls.identity.restrictions.emailDomain.v1}`);
}
async function getDomainRestrictionsConfig() {
  return Get(`${urls.identity.restrictions.emailDomain.v1}/config`);
}
async function createDomainRestriction(body) {
  return Post(`${urls.identity.restrictions.emailDomain.v1}`, body);
}
async function updateDomainRestrictionConfig(body) {
  return Post(`${urls.identity.restrictions.emailDomain.v1}/config`, body);
}
async function deleteDomainRestriction(id) {
  return Delete(`${urls.identity.restrictions.emailDomain.v1}/${id}`);
}
async function getIPRestrictions(params) {
  return Get(`${urls.identity.restrictions.ip.v1}`, params);
}
async function getIPRestrictionsConfig() {
  return Get(`${urls.identity.restrictions.ip.v1}/config`);
}
async function createIPRestriction(body) {
  return Post(`${urls.identity.restrictions.ip.v1}`, body);
}
async function bulkCreateIPRestriction(body) {
  return Post(`${urls.identity.restrictions.ip.v1}/bulk`, body);
}
async function updateIPRestrictionConfig(body) {
  return Post(`${urls.identity.restrictions.ip.v1}/config`, body);
}
async function deleteIPRestriction(id) {
  return Delete(`${urls.identity.restrictions.ip.v1}/${id}`);
}
async function testCurrentIp() {
  return Post(`${urls.identity.restrictions.ip.v1}/verify`);
}
async function testCurrentIpInAllowList() {
  return Post(`${urls.identity.restrictions.ip.v1}/verify/allow`);
}
var init_secutiry_poilicy = __esm({
  "node_modules/@frontegg/rest-api/auth/secutiry-poilicy/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/auth/enums.js
var SocialLoginProviders, AuthStrategyEnum, MachineToMachineAuthStrategy;
var init_enums = __esm({
  "node_modules/@frontegg/rest-api/auth/enums.js"() {
    (function(SocialLoginProviders2) {
      SocialLoginProviders2["Microsoft"] = "microsoft";
      SocialLoginProviders2["Facebook"] = "facebook";
      SocialLoginProviders2["Google"] = "google";
      SocialLoginProviders2["Github"] = "github";
      SocialLoginProviders2["Slack"] = "slack";
      SocialLoginProviders2["Apple"] = "apple";
      SocialLoginProviders2["Linkedin"] = "linkedin";
    })(SocialLoginProviders || (SocialLoginProviders = {}));
    (function(AuthStrategyEnum2) {
      AuthStrategyEnum2["EmailAndPassword"] = "EmailAndPassword";
      AuthStrategyEnum2["MagicLink"] = "MagicLink";
      AuthStrategyEnum2["Code"] = "Code";
      AuthStrategyEnum2["NoLocalAuthentication"] = "NoLocalAuthentication";
      AuthStrategyEnum2["SmsCode"] = "SmsCode";
    })(AuthStrategyEnum || (AuthStrategyEnum = {}));
    (function(MachineToMachineAuthStrategy2) {
      MachineToMachineAuthStrategy2["ClientCredentials"] = "ClientCredentials";
      MachineToMachineAuthStrategy2["AccessToken"] = "AccessToken";
    })(MachineToMachineAuthStrategy || (MachineToMachineAuthStrategy = {}));
  }
});

// node_modules/@frontegg/rest-api/jwt.js
function polyfill(input) {
  const str = String(input).replace(/=+$/, "");
  if (str.length % 4 === 1) {
    throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
  }
  let output = "";
  for (let bc = 0, bs, buffer, idx = 0; buffer = str.charAt(idx++); ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
    buffer = chars.indexOf(buffer);
  }
  return output;
}
function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {
    let code = p.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) {
      code = "0" + code;
    }
    return "%" + code;
  }));
}
var chars, InvalidCharacterError, atob, base64UrlDecode, InvalidTokenError, jwtDecode;
var init_jwt = __esm({
  "node_modules/@frontegg/rest-api/jwt.js"() {
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    InvalidCharacterError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    atob = typeof window !== "undefined" && window.atob && window.atob.bind(window) || polyfill;
    base64UrlDecode = (str) => {
      let output = str.replace(/-/g, "+").replace(/_/g, "/");
      switch (output.length % 4) {
        case 0:
          break;
        case 2:
          output += "==";
          break;
        case 3:
          output += "=";
          break;
        default:
          throw new Error("Illegal base64url string!");
      }
      try {
        return b64DecodeUnicode(output);
      } catch (err) {
        return atob(output);
      }
    };
    InvalidTokenError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    jwtDecode = (token, options = {}) => {
      const pos = !!options.header ? 0 : 1;
      try {
        return JSON.parse(base64UrlDecode(token.split(".")[pos]));
      } catch (e) {
        throw new InvalidTokenError("Invalid token specified: " + e.message);
      }
    };
  }
});

// node_modules/@frontegg/rest-api/auth/secutiry-poilicy/interfaces.js
var RestrictionType;
var init_interfaces2 = __esm({
  "node_modules/@frontegg/rest-api/auth/secutiry-poilicy/interfaces.js"() {
    (function(RestrictionType2) {
      RestrictionType2["ALLOW"] = "ALLOW";
      RestrictionType2["BLOCK"] = "BLOCK";
    })(RestrictionType || (RestrictionType = {}));
  }
});

// node_modules/@frontegg/rest-api/auth/interfaces.js
var SecondaryAuthStrategy, WebAuthnDeviceType, MFAStrategyEnum, LOAD_AUTHORIZATION_FF;
var init_interfaces3 = __esm({
  "node_modules/@frontegg/rest-api/auth/interfaces.js"() {
    init_interfaces2();
    init_constants2();
    (function(SecondaryAuthStrategy2) {
      SecondaryAuthStrategy2["WebAuthnPlatform"] = "WebAuthnPlatform";
      SecondaryAuthStrategy2["WebAuthnCrossPlatform"] = "WebAuthnCrossPlatform";
      SecondaryAuthStrategy2["SmsCode"] = "SmsCode";
      SecondaryAuthStrategy2["SmsCodeV2"] = "SmsCodeV2";
      SecondaryAuthStrategy2["Passkeys"] = "Passkeys";
    })(SecondaryAuthStrategy || (SecondaryAuthStrategy = {}));
    (function(WebAuthnDeviceType2) {
      WebAuthnDeviceType2["Platform"] = "Platform";
      WebAuthnDeviceType2["CrossPlatform"] = "CrossPlatform";
    })(WebAuthnDeviceType || (WebAuthnDeviceType = {}));
    (function(MFAStrategyEnum2) {
      MFAStrategyEnum2["AuthenticatorApp"] = "AuthenticatorApp";
      MFAStrategyEnum2["WebAuthnPlatform"] = "WebAuthnPlatform";
      MFAStrategyEnum2["WebAuthnCrossPlatform"] = "WebAuthnCrossPlatform";
      MFAStrategyEnum2["SMS"] = "SMS";
      MFAStrategyEnum2["EmailCode"] = "EmailCode";
    })(MFAStrategyEnum || (MFAStrategyEnum = {}));
    LOAD_AUTHORIZATION_FF = "admin_portal_should_load_authorization";
  }
});

// node_modules/@frontegg/rest-api/entitlements/index.js
var entitlements_exports = {};
__export(entitlements_exports, {
  loadEntitlements: () => loadEntitlements,
  loadEntitlementsV2: () => loadEntitlementsV2
});
async function loadEntitlements() {
  return Get(urls.entitlements.v1);
}
async function loadEntitlementsV2() {
  return Get(urls.entitlements.v2);
}
var init_entitlements = __esm({
  "node_modules/@frontegg/rest-api/entitlements/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/entitlements/interfaces.js
var NotEntitledJustification, ADMIN_PORTAL_ENTITLEMENTS_FF;
var init_interfaces4 = __esm({
  "node_modules/@frontegg/rest-api/entitlements/interfaces.js"() {
    (function(NotEntitledJustification2) {
      NotEntitledJustification2["MISSING_PERMISSION"] = "MISSING_PERMISSION";
      NotEntitledJustification2["MISSING_FEATURE"] = "MISSING_FEATURE";
      NotEntitledJustification2["BUNDLE_EXPIRED"] = "BUNDLE_EXPIRED";
    })(NotEntitledJustification || (NotEntitledJustification = {}));
    ADMIN_PORTAL_ENTITLEMENTS_FF = "admin_portal_entitlements";
  }
});

// node_modules/@frontegg/rest-api/auth/index.js
var auth_exports = {};
__export(auth_exports, {
  AuthStrategyEnum: () => AuthStrategyEnum,
  MachineToMachineAuthStrategy: () => MachineToMachineAuthStrategy,
  OAuthLogout: () => OAuthLogout,
  SocialLoginProviders: () => SocialLoginProviders,
  acceptInvitation: () => acceptInvitation,
  activateAccount: () => activateAccount,
  activateAccountV2: () => activateAccountV2,
  bulkCreateIPRestriction: () => bulkCreateIPRestriction,
  changePhoneNumber: () => changePhoneNumber,
  changePhoneNumberWithVerification: () => changePhoneNumberWithVerification,
  checkIfAllowToRememberMfaDevice: () => checkIfAllowToRememberMfaDevice,
  createDomainRestriction: () => createDomainRestriction,
  createIPRestriction: () => createIPRestriction,
  createOrUpdateSessionConfigrations: () => createOrUpdateSessionConfigrations,
  createSSOConfiguration: () => createSSOConfiguration,
  createSSOConfigurationByMetadata: () => createSSOConfigurationByMetadata,
  createSSOConfigurationByMetadataUrl: () => createSSOConfigurationByMetadataUrl,
  createSSODomain: () => createSSODomain,
  createSSOGroup: () => createSSOGroup,
  createSamlGroup: () => createSamlGroup,
  createTenantAccessToken: () => createTenantAccessToken,
  createUserAccessToken: () => createUserAccessToken,
  deleteAllSessionsForUser: () => deleteAllSessionsForUser,
  deleteDomainRestriction: () => deleteDomainRestriction,
  deleteIPRestriction: () => deleteIPRestriction,
  deleteSSOConfiguration: () => deleteSSOConfiguration,
  deleteSSODomain: () => deleteSSODomain,
  deleteSSOGroup: () => deleteSSOGroup,
  deleteSamlGroup: () => deleteSamlGroup,
  deleteSessionForUser: () => deleteSessionForUser,
  deleteTenantAccessToken: () => deleteTenantAccessToken,
  deleteTenantApiToken: () => deleteTenantApiToken,
  deleteUserAccessToken: () => deleteUserAccessToken,
  deleteUserApiToken: () => deleteUserApiToken,
  deleteWebAuthnDevice: () => deleteWebAuthnDevice,
  disableMFAAuthenticatorApp: () => disableMFAAuthenticatorApp,
  disableMFASMS: () => disableMFASMS,
  disableMFAWebAuthn: () => disableMFAWebAuthn,
  disableMfa: () => disableMfa,
  enrollMFAAuthenticatorApp: () => enrollMFAAuthenticatorApp,
  enrollMFAAuthenticatorAppForLogin: () => enrollMFAAuthenticatorAppForLogin,
  enrollMFAAuthenticatorAppForLoginV2: () => enrollMFAAuthenticatorAppForLoginV2,
  enrollMFASMS: () => enrollMFASMS,
  enrollMFASMSForLogin: () => enrollMFASMSForLogin,
  enrollMFASMSForLoginV2: () => enrollMFASMSForLoginV2,
  enrollMFAWebAuthn: () => enrollMFAWebAuthn,
  enrollMFAWebAuthnForLogin: () => enrollMFAWebAuthnForLogin,
  enrollMFAWebAuthnForLoginV2: () => enrollMFAWebAuthnForLoginV2,
  enrollMfa: () => enrollMfa,
  exchangeOAuthTokens: () => exchangeOAuthTokens,
  exchangeOAuthTokensV2: () => exchangeOAuthTokensV2,
  forgotPassword: () => forgotPassword,
  generateLoginResponse: () => generateLoginResponse,
  generateLoginResponseFromOAuthResponse: () => generateLoginResponseFromOAuthResponse,
  generateLoginResponseFromOAuthResponseV2: () => generateLoginResponseFromOAuthResponseV2,
  generateLoginResponseV2: () => generateLoginResponseV2,
  generateLoginResponseV3: () => generateLoginResponseV3,
  generateStepupSession: () => generateStepupSession,
  getActivateAccountStrategy: () => getActivateAccountStrategy,
  getCaptchaPolicy: () => getCaptchaPolicy,
  getCurrentUserSession: () => getCurrentUserSession,
  getCurrentUserSessions: () => getCurrentUserSessions,
  getCurrentUserTenantsFunction: () => getCurrentUserTenantsFunction,
  getCustomSocialLoginProvidersV1: () => getCustomSocialLoginProvidersV1,
  getDomainRestrictions: () => getDomainRestrictions,
  getDomainRestrictionsConfig: () => getDomainRestrictionsConfig,
  getGlobalSecurityPolicy: () => getGlobalSecurityPolicy,
  getIPRestrictions: () => getIPRestrictions,
  getIPRestrictionsConfig: () => getIPRestrictionsConfig,
  getLockoutPolicy: () => getLockoutPolicy,
  getMFADevices: () => getMFADevices,
  getMFAStrategiesConfig: () => getMFAStrategiesConfig,
  getMeAndEntitlements: () => getMeAndEntitlements,
  getMeV2: () => getMeV2,
  getMfaPolicy: () => getMfaPolicy,
  getOidcConfiguration: () => getOidcConfiguration,
  getPasswordConfigPolicy: () => getPasswordConfigPolicy,
  getPasswordHistoryPolicy: () => getPasswordHistoryPolicy,
  getPublicAuthStrategiesConfigForAuthenticatedUser: () => getPublicAuthStrategiesConfigForAuthenticatedUser,
  getSSOConfigurations: () => getSSOConfigurations,
  getSSODefaultRoles: () => getSSODefaultRoles,
  getSSOGroups: () => getSSOGroups,
  getSSOPublicConfiguration: () => getSSOPublicConfiguration,
  getSamlConfiguration: () => getSamlConfiguration,
  getSamlRoles: () => getSamlRoles,
  getSamlRolesGroups: () => getSamlRolesGroups,
  getSamlVendorConfiguration: () => getSamlVendorConfiguration,
  getSessionConfigurations: () => getSessionConfigurations,
  getSocialLoginProviders: () => getSocialLoginProviders,
  getSocialLoginProvidersV2: () => getSocialLoginProvidersV2,
  getSocialLoginProvidersV2ForAuthenticatedUser: () => getSocialLoginProvidersV2ForAuthenticatedUser,
  getTabTenantFromSessionStorage: () => getTabTenantFromSessionStorage,
  getTenantAccessTokensData: () => getTenantAccessTokensData,
  getTenantApiTokensData: () => getTenantApiTokensData,
  getUserAccessTokensData: () => getUserAccessTokensData,
  getUserApiTokensData: () => getUserApiTokensData,
  getUserAuthorization: () => getUserAuthorization,
  getUserById: () => getUserById,
  getVendorConfig: () => getVendorConfig,
  getVendorLockoutPolicy: () => getVendorLockoutPolicy,
  getVendorMfaPolicy: () => getVendorMfaPolicy,
  getVendorPasswordHistoryPolicy: () => getVendorPasswordHistoryPolicy,
  getVendorPublicAuthStrategiesConfig: () => getVendorPublicAuthStrategiesConfig,
  getWebAuthnDevices: () => getWebAuthnDevices,
  loadPasswordConfig: () => loadPasswordConfig,
  login: () => login,
  loginViaSocialLogin: () => loginViaSocialLogin,
  loginWithMfa: () => loginWithMfa,
  loginWithMfaV2: () => loginWithMfaV2,
  loginv2: () => loginv2,
  logout: () => logout,
  oidcPostLogin: () => oidcPostLogin,
  oidcPostLoginV2: () => oidcPostLoginV2,
  passwordlessPostLogin: () => passwordlessPostLogin,
  passwordlessPostLoginV2: () => passwordlessPostLoginV2,
  passwordlessPreLogin: () => passwordlessPreLogin,
  postLogin: () => postLogin,
  preDisableMFASMS: () => preDisableMFASMS,
  preDisableMFAWebAuthn: () => preDisableMFAWebAuthn,
  preEnrollMFAAuthenticatorApp: () => preEnrollMFAAuthenticatorApp,
  preEnrollMFAAuthenticatorAppForLogin: () => preEnrollMFAAuthenticatorAppForLogin,
  preEnrollMFASMS: () => preEnrollMFASMS,
  preEnrollMFASMSForLogin: () => preEnrollMFASMSForLogin,
  preEnrollMFAWebAuthn: () => preEnrollMFAWebAuthn,
  preEnrollMFAWebAuthnForLogin: () => preEnrollMFAWebAuthnForLogin,
  preLogin: () => preLogin,
  preLoginV2: () => preLoginV2,
  preLoginWithIdpType: () => preLoginWithIdpType,
  preVerifyMFAEmailCode: () => preVerifyMFAEmailCode,
  preVerifyMFASMSForLogin: () => preVerifyMFASMSForLogin,
  preVerifyMFAWebAuthnForLogin: () => preVerifyMFAWebAuthnForLogin,
  recoverMfaToken: () => recoverMfaToken,
  refreshToken: () => refreshToken,
  refreshTokenV2: () => refreshTokenV2,
  refreshTokenV3: () => refreshTokenV3,
  removeTabTenantFromSessionStorage: () => removeTabTenantFromSessionStorage,
  resendActivationEmail: () => resendActivationEmail,
  resendInvitationEmail: () => resendInvitationEmail,
  resetPassword: () => resetPassword,
  resetPhoneNumber: () => resetPhoneNumber,
  revokeSessionsForUser: () => revokeSessionsForUser,
  saveLockoutPolicy: () => saveLockoutPolicy,
  saveMfaPolicy: () => saveMfaPolicy,
  savePasswordHistoryPolicy: () => savePasswordHistoryPolicy,
  setSSODefaultRoles: () => setSSODefaultRoles,
  setTabTenantInSessionStorage: () => setTabTenantInSessionStorage,
  signUpUser: () => signUpUser,
  silentOAuthRefreshToken: () => silentOAuthRefreshToken,
  silentOAuthRefreshTokenV2: () => silentOAuthRefreshTokenV2,
  testCurrentIp: () => testCurrentIp,
  testCurrentIpInAllowList: () => testCurrentIpInAllowList,
  updateDomainRestrictionConfig: () => updateDomainRestrictionConfig,
  updateIPRestrictionConfig: () => updateIPRestrictionConfig,
  updateSSOConfiguration: () => updateSSOConfiguration,
  updateSSOConfigurationByMetadata: () => updateSSOConfigurationByMetadata,
  updateSSOConfigurationByMetadataUrl: () => updateSSOConfigurationByMetadataUrl,
  updateSSOGroup: () => updateSSOGroup,
  updateSamlConfiguration: () => updateSamlConfiguration,
  updateSamlGroup: () => updateSamlGroup,
  updateSamlRoles: () => updateSamlRoles,
  updateSamlVendorMetadata: () => updateSamlVendorMetadata,
  updateTenantApiTokensData: () => updateTenantApiTokensData,
  updateUserApiTokensData: () => updateUserApiTokensData,
  validateSSODomain: () => validateSSODomain,
  validateSamlDomain: () => validateSamlDomain,
  verifyChangePhoneNumber: () => verifyChangePhoneNumber,
  verifyInviteToken: () => verifyInviteToken,
  verifyMFAAuthenticatorAppForLogin: () => verifyMFAAuthenticatorAppForLogin,
  verifyMFAEmailCode: () => verifyMFAEmailCode,
  verifyMFAEmailCodeV2: () => verifyMFAEmailCodeV2,
  verifyMFASMSForLogin: () => verifyMFASMSForLogin,
  verifyMFASMSForLoginV2: () => verifyMFASMSForLoginV2,
  verifyMFAWebAuthnForLogin: () => verifyMFAWebAuthnForLogin,
  verifyMFAWebAuthnForLoginV2: () => verifyMFAWebAuthnForLoginV2,
  verifyMfa: () => verifyMfa,
  verifyNewDeviceSession: () => verifyNewDeviceSession,
  verifyResetPhoneNumber: () => verifyResetPhoneNumber,
  webAuthnCreateNewDeviceSession: () => webAuthnCreateNewDeviceSession,
  webAuthnPostLogin: () => webAuthnPostLogin,
  webAuthnPostLoginV2: () => webAuthnPostLoginV2,
  webAuthnPreLogin: () => webAuthnPreLogin
});
async function generateLoginResponse(loginResponse) {
  if (!loginResponse.accessToken) {
    return loginResponse;
  }
  ContextHolder.setAccessToken(loginResponse.accessToken);
  const me = await getMeAndEntitlements();
  const decodedContent = loginResponse.accessToken ? jwtDecode(loginResponse.accessToken) : {};
  const user = _extends({}, loginResponse, decodedContent, me);
  ContextHolder.setUser(user);
  return user;
}
async function generateLoginResponseV2(loginResponse) {
  if (!loginResponse.accessToken) {
    return {
      user: loginResponse
    };
  }
  ContextHolder.setAccessToken(loginResponse.accessToken);
  const [me, tenants] = await Promise.all([getMeAndEntitlements(), getTenants()]);
  const decodedContent = loginResponse.accessToken ? jwtDecode(loginResponse.accessToken) : {};
  const user = _extends({}, loginResponse, decodedContent, me);
  ContextHolder.setUser(user);
  return {
    user,
    tenants
  };
}
function shouldLoadEntitlements() {
  if (!ContextHolder.shouldLoadEntitlements()) {
    return false;
  }
  const [isEntitlementsFFOn] = FeatureFlags.getFeatureFlags([ADMIN_PORTAL_ENTITLEMENTS_FF], ContextHolder.getAppName() || "");
  return isEntitlementsFFOn;
}
function shouldLoadMeAuthorization() {
  const [shouldLoadAuthorization] = FeatureFlags.getFeatureFlags([LOAD_AUTHORIZATION_FF], ContextHolder.getAppName() || "");
  return shouldLoadAuthorization;
}
async function generateLoginResponseV3(loginResponse) {
  const {
    accessToken
  } = loginResponse;
  if (!accessToken) {
    return {
      user: loginResponse
    };
  }
  ContextHolder.setAccessToken(accessToken);
  const [me, currentUserTenants] = await Promise.all([getMeAndEntitlements(), getCurrentUserTenantsFunction()()]);
  const decodedContent = accessToken ? jwtDecode(accessToken) : {};
  const user = _extends({}, loginResponse, decodedContent, me);
  if (ContextHolder.isSessionPerTenantEnabled()) {
    setTabTenantInSessionStorage(user.tenantId);
  }
  ContextHolder.setUser(user);
  return {
    user,
    tenants: currentUserTenants.tenants,
    activeTenant: currentUserTenants.activeTenant
  };
}
async function generateLoginResponseFromOAuthResponse(oauthResponse) {
  ContextHolder.setAccessToken(oauthResponse.id_token);
  const me = await getMeAndEntitlements();
  const decodedContent = oauthResponse.id_token ? jwtDecode(oauthResponse.id_token) : {};
  const user = _extends({
    mfaRequired: false,
    accessToken: oauthResponse.id_token,
    refreshToken: oauthResponse.refresh_token
  }, decodedContent, me, {
    expiresIn: oauthResponse.expires_in || 300
  });
  ContextHolder.setUser(user);
  return user;
}
async function generateLoginResponseFromOAuthResponseV2(oauthResponse) {
  ContextHolder.setAccessToken(oauthResponse.id_token);
  const [me, currentUserTenants] = await Promise.all([getMeAndEntitlements(), getCurrentUserTenantsFunction()()]);
  const decodedContent = oauthResponse.id_token ? jwtDecode(oauthResponse.id_token) : {};
  const user = _extends({
    mfaRequired: false,
    accessToken: oauthResponse.id_token,
    refreshToken: oauthResponse.refresh_token
  }, decodedContent, me, {
    expiresIn: oauthResponse.expires_in || 300
  });
  if (ContextHolder.isSessionPerTenantEnabled()) {
    setTabTenantInSessionStorage(user.tenantId);
  }
  ContextHolder.setUser(user);
  return {
    user,
    tenants: currentUserTenants.tenants,
    activeTenant: currentUserTenants.activeTenant
  };
}
async function preLogin(body) {
  try {
    const {
      address
    } = await Post(`${urls.identity.auth.v1}/user/saml/prelogin`, body);
    return address;
  } catch {
    return null;
  }
}
async function preLoginWithIdpType(body) {
  return Post(`${urls.identity.auth.v1}/user/saml/prelogin`, body);
}
async function postLogin(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/saml/postlogin`, body);
  return generateLoginResponse(data);
}
async function oidcPostLogin(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/oidc/postlogin`, body);
  return generateLoginResponse(data);
}
async function login(body) {
  const data = await Post(`${urls.identity.auth.v1}/user`, body);
  return generateLoginResponse(data);
}
async function loginv2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user`, body);
  return generateLoginResponseV3(data);
}
async function loginWithMfa(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/verify`, body);
  return generateLoginResponse(data);
}
async function loginWithMfaV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/verify`, body);
  return generateLoginResponseV3(data);
}
async function activateAccount(body) {
  return Post(`${urls.identity.users.v1}/activate`, body);
}
async function activateAccountV2(body) {
  const data = await Post(`${urls.identity.users.v1}/activate`, body);
  return generateLoginResponseV3(data);
}
async function getActivateAccountStrategy(params) {
  return Get(`${urls.identity.users.v1}/activate/strategy`, params);
}
async function resendActivationEmail(body) {
  return Post(`${urls.identity.users.v1}/activate/reset`, body);
}
async function resendInvitationEmail(body) {
  return Post(`${urls.identity.users.v1}/invitation/reset`, body);
}
async function acceptInvitation(body) {
  return Post(`${urls.identity.users.v1}/invitation/accept`, body);
}
async function refreshToken() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.identity.auth.v1}/user/token/refresh`, {
    tenantId: tabTenantId
  });
  return generateLoginResponse(data);
}
async function refreshTokenV2() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.identity.auth.v1}/user/token/refresh`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseV2(data);
}
async function refreshTokenV3() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.identity.auth.v1}/user/token/refresh`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseV3(data);
}
async function logout() {
  return Post(`${urls.identity.auth.v1}/logout`);
}
async function OAuthLogout(params) {
  return Get(`${urls.oauth.v1}/logout`, params);
}
async function forgotPassword(body) {
  return Post(`${urls.identity.users.v1}/passwords/reset`, body);
}
async function resetPassword(body) {
  return Post(`${urls.identity.users.v1}/passwords/reset/verify`, body);
}
async function loadPasswordConfig(params) {
  return Get(`${urls.identity.users.v1}/passwords/config`, params);
}
async function recoverMfaToken(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/recover`, body);
}
async function enrollMfa() {
  return Post(`${urls.identity.users.v1}/mfa/enroll`);
}
async function preEnrollMFAAuthenticatorApp() {
  return Post(`${urls.identity.users.v1}/mfa/authenticator/enroll`);
}
async function enrollMFAAuthenticatorApp(body) {
  return Post(`${urls.identity.users.v1}/mfa/authenticator/enroll/verify`, body);
}
async function preEnrollMFASMS(body) {
  return Post(`${urls.identity.users.v1}/mfa/sms/enroll`, body);
}
async function enrollMFASMS(body) {
  return Post(`${urls.identity.users.v1}/mfa/sms/enroll/verify`, body);
}
async function preEnrollMFAWebAuthn() {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/enroll`);
}
async function enrollMFAWebAuthn(body) {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/enroll/verify`, body);
}
async function verifyMfa(body) {
  return Post(`${urls.identity.users.v1}/mfa/enroll/verify`, body);
}
async function disableMfa(body) {
  return Post(`${urls.identity.users.v1}/mfa/disable`, body);
}
async function disableMFAAuthenticatorApp(deviceId, body) {
  return Post(`${urls.identity.users.v1}/mfa/authenticator/${deviceId}/disable/verify`, body);
}
async function preDisableMFASMS(deviceId) {
  return Post(`${urls.identity.users.v1}/mfa/sms/${deviceId}/disable`);
}
async function disableMFASMS(deviceId, body) {
  return Post(`${urls.identity.users.v1}/mfa/sms/${deviceId}/disable/verify`, body);
}
async function preDisableMFAWebAuthn(deviceId) {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/${deviceId}/disable`);
}
async function disableMFAWebAuthn(deviceId, body) {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/${deviceId}/disable/verify`, body);
}
async function getMFADevices() {
  return Get(`${urls.identity.users.v1}/mfa/devices`);
}
async function preEnrollMFAAuthenticatorAppForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/authenticator/enroll`, body);
}
async function enrollMFAAuthenticatorAppForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/authenticator/enroll/verify`, body);
}
async function enrollMFAAuthenticatorAppForLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/authenticator/enroll/verify`, body);
  return generateLoginResponseV3(data);
}
async function verifyMFAAuthenticatorAppForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/authenticator/${deviceId}/verify`, body);
}
async function preVerifyMFAEmailCode(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/emailcode`, body);
}
async function verifyMFAEmailCode(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/emailcode/verify`, body);
}
async function verifyMFAEmailCodeV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/emailcode/verify`, body);
  return generateLoginResponseV3(data);
}
async function preEnrollMFASMSForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/enroll`, body);
}
async function enrollMFASMSForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/enroll/verify`, body);
}
async function enrollMFASMSForLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/sms/enroll/verify`, body);
  return generateLoginResponseV3(data);
}
async function preVerifyMFASMSForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/${deviceId}`, body);
}
async function verifyMFASMSForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/${deviceId}/verify`, body);
}
async function verifyMFASMSForLoginV2(deviceId, body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/sms/${deviceId}/verify`, body);
  return generateLoginResponseV3(data);
}
async function preEnrollMFAWebAuthnForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/enroll`, body);
}
async function enrollMFAWebAuthnForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/enroll/verify`, body);
}
async function enrollMFAWebAuthnForLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/webauthn/enroll/verify`, body);
  return generateLoginResponseV3(data);
}
async function preVerifyMFAWebAuthnForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}`, body);
}
async function verifyMFAWebAuthnForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}/verify`, body);
}
async function verifyMFAWebAuthnForLoginV2(deviceId, body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}/verify`, body);
  return generateLoginResponseV3(data);
}
async function getSamlConfiguration() {
  return Get(`${urls.team.sso.v1}/saml/configurations`);
}
async function updateSamlConfiguration(body) {
  return Post(`${urls.team.sso.v1}/saml/configurations`, body);
}
async function getSamlVendorConfiguration() {
  return Get(`${urls.team.sso.v1}/saml/configurations/vendor-config`);
}
async function updateSamlVendorMetadata(body) {
  return Put(`${urls.team.sso.v1}/saml/configurations/metadata`, body);
}
async function validateSamlDomain() {
  return Put(`${urls.team.sso.v1}/saml/validations/domain`);
}
async function getSamlRoles() {
  return Get(`${urls.team.sso.v1}/saml/configurations/roles/default`);
}
async function getSamlRolesGroups() {
  return Get(`${urls.team.sso.v2}/saml/configurations/groups`);
}
async function updateSamlRoles({
  roleIds
}) {
  return Post(`${urls.team.sso.v1}/saml/configurations/roles/default`, {
    roleIds
  });
}
async function createSamlGroup({
  roleIds,
  group
}) {
  return Post(`${urls.team.sso.v2}/saml/configurations/groups`, {
    group,
    roleIds
  });
}
async function updateSamlGroup({
  roleIds,
  group,
  id
}) {
  return Patch(`${urls.team.sso.v2}/saml/configurations/groups/${id}`, {
    group,
    roleIds
  });
}
async function deleteSamlGroup({
  id
}) {
  return Delete(`${urls.team.sso.v2}/saml/configurations/groups/${id}`);
}
async function getOidcConfiguration() {
  return Get(`${urls.team.sso.v1}/oidc/configurations`);
}
async function getSSOPublicConfiguration() {
  return Get(`${urls.team.sso.v2}/configurations/public`);
}
async function getSocialLoginProviders() {
  return Get(urls.identity.sso.v1);
}
async function getSocialLoginProvidersV2() {
  return Get(urls.identity.sso.v2);
}
async function getSocialLoginProvidersV2ForAuthenticatedUser() {
  return Get(`${urls.identity.sso.v2}/authenticated`);
}
async function getCustomSocialLoginProvidersV1() {
  return Get(urls.identity.sso.custom.v1);
}
async function loginViaSocialLogin({
  provider,
  code,
  idToken,
  redirectUri,
  codeVerifier,
  metadata,
  invitationToken,
  state
}) {
  const params = {};
  if (code) {
    params.code = code;
  }
  if (idToken) {
    params.id_token = idToken;
  }
  if (redirectUri) {
    params.redirectUri = redirectUri;
  }
  if (codeVerifier) {
    params.code_verifier = codeVerifier;
  }
  if (state) {
    params.state = state;
  }
  return Post(`${urls.identity.auth.v1}/user/sso/${provider}/postlogin`, {
    metadata,
    invitationToken
  }, {
    params
  });
}
async function getVendorConfig() {
  return Get(`${urls.identity.configurations.v1}/public`);
}
async function signUpUser(body) {
  const {
    shouldActivate,
    authResponse,
    userId,
    tenantId
  } = await Post(`${urls.identity.users.v1}/signUp`, body);
  const response = {
    shouldActivate,
    userId,
    tenantId
  };
  if (!shouldActivate && authResponse) {
    const {
      user,
      tenants,
      activeTenant
    } = await generateLoginResponseV3(authResponse);
    return _extends({}, response, {
      user,
      tenants,
      activeTenant
    });
  }
  return response;
}
async function getCurrentUserSessions() {
  return Get(urls.identity.users.sessions.currentUser.v1);
}
async function getCurrentUserSession() {
  return Get(`${urls.identity.users.sessions.currentUser.v1}/current`);
}
async function revokeSessionsForUser(userId) {
  return Post(`${urls.identity.users.sessions.v1}/revoke`, {
    userId
  });
}
async function getSessionConfigurations() {
  return Get(urls.identity.users.sessions.configurations.v1);
}
async function createOrUpdateSessionConfigrations(body) {
  await Post(urls.identity.users.sessions.configurations.v1, body);
}
async function deleteSessionForUser(id) {
  await Delete(`${urls.identity.users.sessions.currentUser.v1}/${id}`);
}
async function deleteAllSessionsForUser() {
  await Delete(`${urls.identity.users.sessions.currentUser.v1}/all`);
}
async function getUserAccessTokensData() {
  return Get(urls.identity.users.accessTokens.v1);
}
async function getTenantAccessTokensData() {
  return Get(urls.identity.tenants.accessTokens.v1);
}
async function deleteTenantAccessToken({
  id
}) {
  return Delete(`${urls.identity.tenants.accessTokens.v1}/${id}`);
}
async function deleteUserAccessToken({
  id
}) {
  return Delete(`${urls.identity.users.accessTokens.v1}/${id}`);
}
async function createUserAccessToken(body) {
  return Post(urls.identity.users.accessTokens.v1, body);
}
async function createTenantAccessToken(body) {
  return Post(urls.identity.tenants.accessTokens.v1, body);
}
async function getUserApiTokensData() {
  return Get(urls.identity.users.apiTokens.v1);
}
async function getTenantApiTokensData() {
  return Get(urls.identity.tenants.apiTokens.v1);
}
async function updateUserApiTokensData(body) {
  return Post(urls.identity.users.apiTokens.v1, body);
}
async function updateTenantApiTokensData(body) {
  return Post(urls.identity.tenants.apiTokens.v2, body);
}
async function deleteTenantApiToken({
  tokenId
}) {
  return Delete(`${urls.identity.tenants.apiTokens.v1}/${tokenId}`);
}
async function deleteUserApiToken({
  tokenId
}) {
  return Delete(`${urls.identity.users.apiTokens.v1}/${tokenId}`);
}
async function getUserById({
  userId
}) {
  return Get(`${urls.identity.users.v1}/${userId}`);
}
async function checkIfAllowToRememberMfaDevice(mfaToken) {
  return Get(`${urls.identity.configurations.v1}/mfa-policy/allow-remember-device`, {
    mfaToken
  });
}
async function passwordlessPreLogin(_ref) {
  let {
    type
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded);
  return Post(`${urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/prelogin`, body);
}
async function passwordlessPostLoginV2(_ref2) {
  let {
    type
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2, _excluded2);
  const data = await Post(`${urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/postlogin`, body);
  return generateLoginResponseV3(data);
}
async function passwordlessPostLogin(_ref3) {
  let {
    type
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3, _excluded3);
  return Post(`${urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/postlogin`, body);
}
async function verifyInviteToken({
  token
}) {
  return Post(urls.identity.tenants.invites.verify.v1, {
    token
  });
}
async function getSSOConfigurations() {
  return Get(`${urls.team.sso.v1}/configurations`);
}
async function createSSOConfiguration(body) {
  return Post(`${urls.team.sso.v1}/configurations`, body);
}
async function updateSSOConfiguration(ssoConfigId, body) {
  return Patch(`${urls.team.sso.v1}/configurations/${ssoConfigId}`, body);
}
async function deleteSSOConfiguration(ssoConfigId) {
  return Delete(`${urls.team.sso.v1}/configurations/${ssoConfigId}`);
}
async function createSSOConfigurationByMetadata(body) {
  return Post(`${urls.team.sso.v1}/configurations/metadata`, body);
}
async function updateSSOConfigurationByMetadata(ssoConfigId, body) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/metadata`, body);
}
async function createSSOConfigurationByMetadataUrl(body) {
  return Post(`${urls.team.sso.v1}/configurations/metadata-url`, body);
}
async function updateSSOConfigurationByMetadataUrl(ssoConfigId, body) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/metadata-url`, body);
}
async function createSSODomain(ssoConfigId, body) {
  return Post(`${urls.team.sso.v1}/configurations/${ssoConfigId}/domains`, body);
}
async function deleteSSODomain(ssoConfigId, domainId) {
  return Delete(`${urls.team.sso.v1}/configurations/${ssoConfigId}/domains/${domainId}`);
}
async function validateSSODomain(ssoConfigId, domainId) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/domains/${domainId}/validate`);
}
async function getSSODefaultRoles(ssoConfigId) {
  return Get(`${urls.team.sso.v1}/configurations/${ssoConfigId}/roles`);
}
async function setSSODefaultRoles(ssoConfigId, body) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/roles`, body);
}
async function createSSOGroup(ssoConfigId, body) {
  return Post(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups`, body);
}
async function updateSSOGroup(ssoConfigId, {
  roleIds,
  group,
  id
}) {
  return Patch(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups/${id}`, {
    group,
    roleIds
  });
}
async function deleteSSOGroup(ssoConfigId, groupId) {
  return Delete(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups/${groupId}`);
}
async function getSSOGroups(ssoConfigId) {
  return Get(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups`);
}
async function preLoginV2(body) {
  return Post(`${urls.identity.auth.v2}/user/sso/prelogin`, body);
}
async function oidcPostLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v2}/user/oidc/postlogin`, body);
  return generateLoginResponse(data);
}
async function exchangeOAuthTokensV2(body) {
  const data = await Post(`${urls.oauth.v1}/token`, body);
  return generateLoginResponseFromOAuthResponseV2(data);
}
async function silentOAuthRefreshTokenV2() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.oauth.v1}/authorize/silent`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseFromOAuthResponseV2(data);
}
async function exchangeOAuthTokens(body) {
  const data = await Post(`${urls.oauth.v1}/token`, body);
  return generateLoginResponseFromOAuthResponse(data);
}
async function silentOAuthRefreshToken() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.oauth.v1}/authorize/silent`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseFromOAuthResponse(data);
}
async function resetPhoneNumber(body) {
  return Post(`${urls.identity.users.v1}/phone/reset`, body);
}
async function verifyResetPhoneNumber(body) {
  return Post(`${urls.identity.users.v1}/phone/reset/verify`, body);
}
async function changePhoneNumberWithVerification(body) {
  return Post(`${urls.identity.users.v1}/phone`, body);
}
async function verifyChangePhoneNumber(body) {
  return Post(`${urls.identity.users.v1}/phone/verify`, body);
}
async function changePhoneNumber(body) {
  return Put(`${urls.identity.users.v1}/phone/change`, body);
}
async function webAuthnPreLogin(body) {
  return Post(`${urls.identity.auth.v1}/webauthn/prelogin`, body);
}
async function webAuthnPostLogin(body) {
  return Post(`${urls.identity.auth.v1}/webauthn/postlogin`, body);
}
async function webAuthnPostLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/webauthn/postlogin`, body);
  return generateLoginResponseV3(data);
}
async function webAuthnCreateNewDeviceSession() {
  return Post(urls.identity.webAuthnDevices.v1);
}
async function getWebAuthnDevices() {
  return Get(urls.identity.webAuthnDevices.v1);
}
async function deleteWebAuthnDevice(deviceId) {
  return Delete(`${urls.identity.webAuthnDevices.v1}/${deviceId}`);
}
async function verifyNewDeviceSession(body) {
  return Post(`${urls.identity.webAuthnDevices.v1}/verify`, body);
}
async function getVendorPublicAuthStrategiesConfig() {
  return Get(`${urls.identity.configurations.v1}/auth/strategies/public`);
}
async function getPublicAuthStrategiesConfigForAuthenticatedUser() {
  return Get(`${urls.identity.configurations.v1}/auth/strategies`);
}
async function getMFAStrategiesConfig() {
  return Get(`${urls.identity.configurations.v1}/mfa/strategies`);
}
async function getUserAuthorization() {
  return Get(`${urls.identity.users.authorization.v1}`);
}
async function getMeV2() {
  return Get(`${urls.identity.users.v2}/me`);
}
async function getMeAndEntitlements() {
  const [useEntitlementsV2] = FeatureFlags.getFeatureFlags([USE_ENTITLEMENTS_V2_ENDPOINT_FF], ContextHolder.getAppName() || "");
  const actions = [{
    action: getMeV2,
    shouldLoad: true
  }, {
    action: useEntitlementsV2 ? noThrowLoadEntitlements : loadEntitlements,
    shouldLoad: shouldLoadEntitlements()
  }, {
    action: getUserAuthorization,
    shouldLoad: shouldLoadMeAuthorization()
  }];
  const promises = actions.map((action) => executeConditionalPromise(action));
  const [me, entitlements, authorization] = await Promise.all(promises);
  const tabTenant = getTabTenantFromSessionStorage();
  if (tabTenant) {
    me.tenantId = tabTenant;
  }
  return _extends({}, me, authorization != null ? authorization : {}, {
    entitlements
  });
}
async function generateStepupSession(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/step-up/generate`, body);
  if (!data.accessToken) {
    return data;
  }
  return generateLoginResponseV3(data);
}
var _excluded, _excluded2, _excluded3, noThrowLoadEntitlements;
var init_auth = __esm({
  "node_modules/@frontegg/rest-api/auth/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_tenants();
    init_secutiry_poilicy();
    init_enums();
    init_utils();
    init_constants();
    init_ContextHolder();
    init_fetch();
    init_jwt();
    init_interfaces3();
    init_entitlements();
    init_interfaces4();
    init_feature_flags();
    init_utils();
    init_constants2();
    _excluded = ["type"];
    _excluded2 = ["type"];
    _excluded3 = ["type"];
    noThrowLoadEntitlements = async () => {
      try {
        return await loadEntitlementsV2();
      } catch (e) {
      }
    };
  }
});

// node_modules/@frontegg/rest-api/teams/index.js
var teams_exports = {};
__export(teams_exports, {
  addUser: () => addUser,
  changePassword: () => changePassword,
  createInviteUserLink: () => createInviteUserLink,
  deleteInviteUserLink: () => deleteInviteUserLink,
  deleteUser: () => deleteUser,
  getInviteLinkConfiguration: () => getInviteLinkConfiguration,
  getInviteUserLink: () => getInviteUserLink,
  getProfile: () => getProfile,
  getTemporaryUserConfiguration: () => getTemporaryUserConfiguration,
  loadAvailablePermissions: () => loadAvailablePermissions,
  loadAvailableRoles: () => loadAvailableRoles,
  loadStats: () => loadStats,
  loadUsers: () => loadUsers,
  resendActivationLink: () => resendActivationLink,
  resendInvitationLink: () => resendInvitationLink,
  resendInvitationLinkToAllTenants: () => resendInvitationLinkToAllTenants,
  setPermanentUser: () => setPermanentUser,
  updateInviteUserLink: () => updateInviteUserLink,
  updateProfile: () => updateProfile,
  updateProfileImage: () => updateProfileImage,
  updateUser: () => updateUser,
  updateUserExpirationTime: () => updateUserExpirationTime
});
async function getProfile(params) {
  return Get(`${urls.identity.users.v2}/me`, params != null ? params : {
    addRoles: true
  });
}
async function updateProfile(body) {
  return Put(`${urls.identity.users.v2}/me`, body);
}
async function updateProfileImage(body) {
  return Put(`${urls.team.profile.v1}/me/image/v1`, body, {
    responseType: "plain",
    contentType: void 0
  });
}
async function changePassword(body) {
  return Post(`${urls.identity.users.v1}/passwords/change`, body);
}
async function loadUsers(params) {
  var _params$sort, _params$sort$0$id, _params$sort2, _params$sort2$, _params$sort3, _params$sort3$;
  const filters = (params.filter || []).reduce((p, n) => _extends({}, p, {
    [n.id]: n.value
  }), {});
  const sorts = (_params$sort = params.sort) != null && _params$sort.length ? {
    sortBy: (_params$sort$0$id = (_params$sort2 = params.sort) == null ? void 0 : (_params$sort2$ = _params$sort2[0]) == null ? void 0 : _params$sort2$.id) != null ? _params$sort$0$id : "name",
    sortDirection: (_params$sort3 = params.sort) != null && (_params$sort3$ = _params$sort3[0]) != null && _params$sort3$.desc ? "desc" : "asc"
  } : null;
  return Get(urls.team.members.v1, _extends({
    pageOffset: params.pageOffset,
    pageSize: params.pageSize
  }, filters, sorts));
}
async function addUser(body) {
  return Post(urls.identity.users.v2, _extends({}, body, {
    provider: "local"
  }));
}
async function deleteUser(body) {
  return Delete(`${urls.team.members.v1}/${body.userId}`);
}
async function updateUser(body) {
  return Put(urls.team.members.v1, body);
}
async function updateUserExpirationTime(body) {
  const {
    userId,
    expirationInSeconds
  } = body;
  return Put(`${urls.identity.users.temporary.v1}/${userId}`, {
    expirationInSeconds
  });
}
async function setPermanentUser(userId) {
  return Delete(`${urls.identity.users.temporary.v1}/${userId}`);
}
async function getTemporaryUserConfiguration() {
  return Get(urls.identity.users.temporary.configuration.v1);
}
async function createInviteUserLink(body) {
  return Post(urls.identity.tenants.invites.user.v1, _extends({}, body));
}
async function updateInviteUserLink(body) {
  return Patch(urls.identity.tenants.invites.user.v1, _extends({}, body));
}
async function deleteInviteUserLink() {
  return Delete(urls.identity.tenants.invites.user.v1);
}
async function getInviteUserLink() {
  return Get(urls.identity.tenants.invites.user.v1);
}
async function getInviteLinkConfiguration() {
  return Get(urls.identity.tenants.invites.configuration.v1);
}
async function loadAvailableRoles() {
  return Get(urls.team.roles.v1);
}
async function loadAvailablePermissions() {
  return Get(urls.identity.permissions.v1);
}
async function loadStats() {
  return Get(`${urls.team.stats.v1}/members`);
}
async function resendActivationLink(body) {
  return Post(`${urls.team.members.v1}/${body.userId}/resendActivationEmail`, {});
}
async function resendInvitationLink(body) {
  return Post(urls.identity.users.v2, _extends({}, body, {
    provider: "local"
  }));
}
async function resendInvitationLinkToAllTenants(body) {
  return Post(urls.identity.users.invitation.resendAll.v1, _extends({}, body));
}
var init_teams = __esm({
  "node_modules/@frontegg/rest-api/teams/index.js"() {
    init_extends();
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/metadata/index.js
var metadata_exports = {};
__export(metadata_exports, {
  getAdminBoxMetadata: () => getAdminBoxMetadata,
  getAuditsMetadata: () => getAuditsMetadata,
  getCurrentUserIpMetadata: () => getCurrentUserIpMetadata,
  getIpAdressMetadata: () => getIpAdressMetadata,
  getNotificationsMetadata: () => getNotificationsMetadata,
  getSamlMetadata: () => getSamlMetadata,
  updateAdminBoxMetadata: () => updateAdminBoxMetadata
});
async function getMetadata(body) {
  var _data$rows, _data$rows2;
  const data = await Get("/metadata", body);
  if (data != null && (_data$rows = data.rows) != null && _data$rows[0])
    return data == null ? void 0 : (_data$rows2 = data.rows) == null ? void 0 : _data$rows2[0];
  throw new Error(`metadata not found: ${body.entityName}`);
}
async function getAdminBoxMetadata() {
  return Get("/metadata/admin-box");
}
async function updateAdminBoxMetadata(body) {
  return Post("/metadata/admin-box", body);
}
async function getIpMetadata(ip) {
  const data = await Get(`/metadata/ip/${ip}`);
  if (data)
    return data;
  throw new Error(`ip metadata not found`);
}
async function getCurrentUserIpMetadata() {
  const data = await Get(`/metadata/ipme`);
  if (data)
    return data;
  throw new Error(`ip metadata not found`);
}
var getNotificationsMetadata, getSamlMetadata, getAuditsMetadata, getIpAdressMetadata;
var init_metadata = __esm({
  "node_modules/@frontegg/rest-api/metadata/index.js"() {
    init_fetch();
    getNotificationsMetadata = async () => getMetadata({
      entityName: "notifications"
    });
    getSamlMetadata = async () => getMetadata({
      entityName: "saml"
    });
    getAuditsMetadata = async () => getMetadata({
      entityName: "audits"
    });
    getIpAdressMetadata = async (ip) => getIpMetadata(ip);
  }
});

// node_modules/@frontegg/rest-api/reports/index.js
var reports_exports = {};
__export(reports_exports, {
  downloadReport: () => downloadReport,
  getReport: () => getReport,
  getReports: () => getReports,
  renderReport: () => renderReport,
  scheduleReport: () => scheduleReport,
  sendReport: () => sendReport
});
async function getReports(body) {
  return Get(`${urls.reports.service.v2}/tenant-reports`, body);
}
async function getReport(body) {
  return Get(`${urls.reports.service.v2}/${body.id}/tenant-reports`);
}
async function renderReport(_ref) {
  let {
    dataFilters
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded4);
  const html = await Get(`${urls.reports.trigger.v1}/preview-report`, _extends({}, body, {
    dataFilters: btoa(JSON.stringify(dataFilters || {})),
    responseType: "html"
  }), {
    responseType: "plain"
  });
  return {
    html
  };
}
async function scheduleReport(_ref2) {
  let {
    templateId,
    dataFilters
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2, _excluded22);
  return Post(`${urls.reports.service.v2}/${templateId}/tenant-reports`, _extends({}, body, {
    dataFilters: btoa(JSON.stringify(dataFilters || {}))
  }));
}
async function downloadReport(_ref3) {
  let {
    dataFilters
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3, _excluded32);
  const blob = await Get(`${urls.reports.trigger.v1}/preview-report`, _extends({}, body, {
    dataFilters: btoa(JSON.stringify(dataFilters || {}))
  }), {
    responseType: "blob"
  });
  let contentType = "text/html";
  let contentExt = "html";
  if (body.responseType === "pdf") {
    contentType = "application/pdf";
    contentExt = "pdf";
  } else if (body.responseType === "image") {
    contentType = "image/jpeg";
    contentExt = "jpg";
  }
  const newBlob = new Blob([blob], {
    type: contentType
  });
  const fileURL = URL.createObjectURL(newBlob);
  const tempLink = document.createElement("a");
  tempLink.href = fileURL;
  tempLink.setAttribute("download", `report_${body.name || ""}.${contentExt}`);
  tempLink.click();
  setTimeout(tempLink.remove.bind(tempLink));
}
async function sendReport(body) {
  return Post(`${urls.reports.trigger.v1}/tenant-reports`, body);
}
var _excluded4, _excluded22, _excluded32;
var init_reports = __esm({
  "node_modules/@frontegg/rest-api/reports/index.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded4 = ["dataFilters"];
    _excluded22 = ["templateId", "dataFilters"];
    _excluded32 = ["dataFilters"];
  }
});

// node_modules/@frontegg/rest-api/notifications/index.js
var notifications_exports = {};
__export(notifications_exports, {
  getNotifications: () => getNotifications,
  markAllAsRead: () => markAllAsRead,
  updateNotificationIsPinned: () => updateNotificationIsPinned,
  updateNotificationStatus: () => updateNotificationStatus
});
async function getNotifications(params) {
  return Get(urls.notifications.v1, {
    params
  });
}
async function updateNotificationStatus(params) {
  return Put(`${urls.notifications.v1}/status`, {
    params
  });
}
async function updateNotificationIsPinned(params) {
  const {
    notificationId,
    pinStatus
  } = params;
  return Put(`${urls.notifications.v1}/${pinStatus}`, {
    notificationId
  });
}
async function markAllAsRead() {
  return Post(`${urls.notifications.v1}/status/mark-all-read`);
}
var init_notifications = __esm({
  "node_modules/@frontegg/rest-api/notifications/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/audits/index.js
var audits_exports = {};
__export(audits_exports, {
  exportAudits: () => exportAudits,
  getAudits: () => getAudits,
  getAuditsStats: () => getAuditsStats
});
async function getAudits(params) {
  return Get(urls.audits.v1, params);
}
async function getAuditsStats(params) {
  return Get(`${urls.audits.v1}/stats`, params);
}
async function exportAudits(params) {
  const {
    endpoint,
    headerProps
  } = params, restParams = _objectWithoutPropertiesLoose(params, _excluded5);
  return PostDownload(`${urls.audits.v1}/export/${endpoint}`, {
    properties: headerProps
  }, restParams);
}
var _excluded5;
var init_audits = __esm({
  "node_modules/@frontegg/rest-api/audits/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded5 = ["endpoint", "headerProps"];
  }
});

// node_modules/@frontegg/rest-api/connectivity/index.js
var connectivity_exports = {};
__export(connectivity_exports, {
  deleteEmailConfiguration: () => deleteEmailConfiguration,
  deleteEmailSubscriptions: () => deleteEmailSubscriptions,
  deleteSMSConfiguration: () => deleteSMSConfiguration,
  deleteSMSSubscriptions: () => deleteSMSSubscriptions,
  deleteSlackConfiguration: () => deleteSlackConfiguration,
  deleteWebhooksConfiguration: () => deleteWebhooksConfiguration,
  getCategories: () => getCategories,
  getChannelMaps: () => getChannelMaps,
  getEmailConfiguration: () => getEmailConfiguration,
  getSMSConfiguration: () => getSMSConfiguration,
  getSlackChannels: () => getSlackChannels,
  getSlackConfiguration: () => getSlackConfiguration,
  getSlackScope: () => getSlackScope,
  getWebhookLog: () => getWebhookLog,
  getWebhooksConfigurations: () => getWebhooksConfigurations,
  patchEmailConfiguration: () => patchEmailConfiguration,
  patchSMSConfiguration: () => patchSMSConfiguration,
  postEmailConfiguration: () => postEmailConfiguration,
  postSMSConfiguration: () => postSMSConfiguration,
  postSlackCode: () => postSlackCode,
  postSlackConfiguration: () => postSlackConfiguration,
  postWebhookRetry: () => postWebhookRetry,
  postWebhookTest: () => postWebhookTest,
  postWebhooksConfiguration: () => postWebhooksConfiguration,
  putEmailSubscriptions: () => putEmailSubscriptions,
  putSMSSubscriptions: () => putSMSSubscriptions
});
var _excluded6, _excluded23, getSlackConfiguration, getSlackScope, getSlackChannels, postSlackConfiguration, deleteSlackConfiguration, postSlackCode, getEmailConfiguration, postEmailConfiguration, patchEmailConfiguration, deleteEmailSubscriptions, putEmailSubscriptions, deleteEmailConfiguration, getSMSConfiguration, postSMSConfiguration, patchSMSConfiguration, deleteSMSSubscriptions, putSMSSubscriptions, deleteSMSConfiguration, getWebhooksConfigurations, postWebhooksConfiguration, deleteWebhooksConfiguration, getWebhookLog, postWebhookTest, postWebhookRetry, getCategories, getChannelMaps;
var init_connectivity = __esm({
  "node_modules/@frontegg/rest-api/connectivity/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_constants();
    init_fetch();
    _excluded6 = ["eventKey"];
    _excluded23 = ["eventKey"];
    getSlackConfiguration = () => {
      return Get(`${urls.integrations.configurations.v1}/slack`);
    };
    getSlackScope = () => {
      return Get(`${urls.integrations.configurations.v1}/slack/applications`);
    };
    getSlackChannels = () => {
      return Get(`${urls.integrations.configurations.v1}/slack/channels`);
    };
    postSlackConfiguration = (data) => {
      if (data.id) {
        return Patch(`${urls.integrations.configurations.v1}/slack/subscription/${data.id}`, data);
      }
      return Post(`${urls.integrations.configurations.v1}/slack/subscriptions`, data);
    };
    deleteSlackConfiguration = (data) => {
      return Delete(`${urls.integrations.configurations.v1}/slack/subscriptions/${data.id}`);
    };
    postSlackCode = (code) => {
      return Post(`${urls.integrations.configurations.v1}/slack/applications/registrations`, {
        code
      });
    };
    getEmailConfiguration = () => {
      return Get(`${urls.integrations.configurations.v1}/emails`);
    };
    postEmailConfiguration = (_ref) => {
      let {
        eventKey
      } = _ref, data = _objectWithoutPropertiesLoose(_ref, _excluded6);
      return Post(`${urls.integrations.configurations.v1}/emails/${eventKey}`, data);
    };
    patchEmailConfiguration = ({
      eventKey,
      enabled
    }) => {
      return Patch(`${urls.integrations.configurations.v1}/emails/${eventKey}`, {
        enabled
      });
    };
    deleteEmailSubscriptions = (eventKey, subscriptionId) => {
      return Delete(`${urls.integrations.configurations.v1}/emails/${eventKey}/subscriptions/${subscriptionId}`);
    };
    putEmailSubscriptions = (subscriptionId, eventKey, data) => {
      return Put(`${urls.integrations.configurations.v1}/emails/${eventKey}/subscriptions/${subscriptionId}`, data);
    };
    deleteEmailConfiguration = (eventKey) => {
      return Delete(`${urls.integrations.configurations.v1}/emails/${eventKey}`);
    };
    getSMSConfiguration = () => {
      return Get(`${urls.integrations.configurations.v2}/sms`);
    };
    postSMSConfiguration = (_ref2) => {
      let {
        eventKey
      } = _ref2, data = _objectWithoutPropertiesLoose(_ref2, _excluded23);
      return Post(`${urls.integrations.configurations.v2}/sms/${eventKey}`, data);
    };
    patchSMSConfiguration = ({
      eventKey,
      enabled
    }) => {
      return Patch(`${urls.integrations.configurations.v2}/sms/${eventKey}`, {
        enabled
      });
    };
    deleteSMSSubscriptions = (eventKey, subscriptionId) => {
      return Delete(`${urls.integrations.configurations.v2}/sms/${eventKey}/subscriptions/${subscriptionId}`);
    };
    putSMSSubscriptions = (subscriptionId, eventKey, data) => {
      return Put(`${urls.integrations.configurations.v2}/sms/${eventKey}/subscriptions/${subscriptionId}`, data);
    };
    deleteSMSConfiguration = (eventKey) => {
      return Delete(`${urls.integrations.configurations.v2}/sms/${eventKey}`);
    };
    getWebhooksConfigurations = () => {
      return Get(urls.webhooks.v1);
    };
    postWebhooksConfiguration = (data) => {
      if (data._id) {
        return Patch(`${urls.webhooks.v1}/${data._id}`, data);
      } else {
        return Post(`${urls.webhooks.v1}/custom`, data);
      }
    };
    deleteWebhooksConfiguration = (id) => {
      return Delete(`${urls.webhooks.v1}/${id}`);
    };
    getWebhookLog = (id, offset = 0, limit = 10) => {
      const query = new URLSearchParams({
        id,
        offset: `${offset}`,
        limit: `${limit}`
      });
      return Get(`${urls.webhooks.v1}/logs/?${query.toString()}`);
    };
    postWebhookTest = (data) => {
      return Post(`${urls.webhooks.v1}/test`, data);
    };
    postWebhookRetry = (id) => {
      return Post(`${urls.webhooks.v1}/logs/${id}/retries`);
    };
    getCategories = () => {
      return Get(`${urls.events.configurations.v1}/categories`);
    };
    getChannelMaps = (channels) => {
      return Get(urls.events.configurations.v1, {
        channels
      });
    };
  }
});

// node_modules/@frontegg/rest-api/account-settings/index.js
var account_settings_exports = {};
__export(account_settings_exports, {
  getPublicSettings: () => getPublicSettings,
  getSettings: () => getSettings,
  updateSettings: () => updateSettings
});
async function updateSettings(body, options) {
  return Put(urls.tenants.accountSettings.v1, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getSettings(options) {
  return Get(urls.tenants.accountSettings.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getPublicSettings() {
  return Get(`${urls.tenants.accountSettings.v1}/public`);
}
var init_account_settings = __esm({
  "node_modules/@frontegg/rest-api/account-settings/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/roles/index.js
var roles_exports = {};
__export(roles_exports, {
  addRole: () => addRole,
  addRoleV2: () => addRoleV2,
  attachPermissionToRoles: () => attachPermissionToRoles,
  attachPermissionsToRole: () => attachPermissionsToRole,
  deleteRole: () => deleteRole,
  getPermissionCategories: () => getPermissionCategories,
  getPermissions: () => getPermissions,
  getRoles: () => getRoles,
  updateRole: () => updateRole
});
async function getRoles() {
  return Get(urls.identity.roles.v1);
}
async function addRole(body) {
  return Post(urls.identity.roles.v1, body);
}
async function deleteRole({
  roleId
}) {
  return Delete(`${urls.identity.roles.v1}/${roleId}`);
}
async function updateRole(_ref) {
  let {
    roleId
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded7);
  return Patch(`${urls.identity.roles.v1}/${roleId}`, body);
}
async function attachPermissionsToRole(_ref2) {
  let {
    roleId
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2, _excluded24);
  return Put(`${urls.identity.roles.v1}/${roleId}/permissions`, body);
}
async function getPermissions() {
  return Get(urls.identity.permissions.v1);
}
async function attachPermissionToRoles(_ref3) {
  let {
    permissionId
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3, _excluded33);
  return Put(`${urls.identity.permissions.v1}/${permissionId}/roles`, body);
}
async function getPermissionCategories() {
  return Get(`${urls.identity.permissions.v1}/categories`);
}
async function addRoleV2(body) {
  return Post(urls.identity.roles.v2, body);
}
var _excluded7, _excluded24, _excluded33;
var init_roles = __esm({
  "node_modules/@frontegg/rest-api/roles/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded7 = ["roleId"];
    _excluded24 = ["roleId"];
    _excluded33 = ["permissionId"];
  }
});

// node_modules/@frontegg/rest-api/subscriptions/subscriptions.js
async function getSubscriptions() {
  return Get(urls.subscriptions.billing.subscriptions.v1);
}
async function getSubscription(subscriptionId) {
  return Get(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}`);
}
async function cancelSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}/cancellations/`, {});
}
async function renewSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}/renewals/`, {});
}
async function updateSubscription(subscriptionId, {
  paymentMethodId,
  planId
}) {
  return Put(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}`, {
    paymentMethodId,
    planId
  });
}
var init_subscriptions = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/subscriptions.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/managedSubscriptions.js
async function getManagedSubscription(subscriptionId) {
  return Get(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}`);
}
async function getManagedSubscriptions() {
  return Get(`${urls.subscriptions.managedSubscriptions.v1}`);
}
async function cancelManagedSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}/cancellations/`, {});
}
async function renewManagedSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}/renewals/`, {});
}
async function updateManagedSubscription(subscriptionId, {
  paymentMethodId,
  planId
}) {
  return Put(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}`, {
    paymentMethodId,
    planId
  });
}
var init_managedSubscriptions = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/managedSubscriptions.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/plans.js
async function getSubscriptionPlans() {
  return Get(urls.subscriptions.billing.plans.v1);
}
async function getSubscriptionPlan(planId) {
  return Get(`${urls.subscriptions.billing.plans.v1}/${planId}`);
}
var init_plans = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/plans.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/invoices.js
async function getSubscriptionInvoices() {
  return Get(urls.subscriptions.billing.invoices.v1);
}
async function getSubscriptionInvoice(invoiceId) {
  return Get(`${urls.subscriptions.billing.invoices.v1}/${invoiceId}`);
}
async function getSubscriptionInvoicePdf(invoiceId, outputFileName) {
  return Get(`${urls.subscriptions.billing.invoices.v1}/${invoiceId}/pdf`, {
    outputFileName
  }, {
    responseType: "blob"
  });
}
var init_invoices = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/invoices.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/paymentMethods.js
async function getPaymentMethods() {
  return Get(urls.subscriptions.billing.paymentMethods.v1);
}
async function getPaymentMethod(paymentMethodId) {
  return Get(`${urls.subscriptions.billing.paymentMethods.v1}/${paymentMethodId}`);
}
async function updatePaymentMethodBillingDetails(paymentMethodId, _ref) {
  let {
    email
  } = _ref, address = _objectWithoutPropertiesLoose(_ref, _excluded8);
  return Patch(`${urls.subscriptions.billing.paymentMethods.v1}/${paymentMethodId}/billing-details`, {
    email,
    address
  });
}
var _excluded8;
var init_paymentMethods = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/paymentMethods.js"() {
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded8 = ["email"];
  }
});

// node_modules/@frontegg/rest-api/subscriptions/providers/stripe/index.js
async function createSubscription(request) {
  return Post(urls.subscriptions.billing.paymentProviders.stripe.subscriptions.v1, request);
}
async function getStripeCustomer(tenantId) {
  return Get(`${urls.subscriptions.billing.paymentProviders.stripe.customers.v1}/${tenantId}`);
}
async function createStripeCustomer(request) {
  return Post(`${urls.subscriptions.billing.paymentProviders.stripe.customers.v1}`, request);
}
async function getStripePaymentProviderConfiguration() {
  return Get(`${urls.subscriptions.billing.paymentProviders.stripe.publicConfigurations.v1}`);
}
async function createStripePaymentMethodSetupIntentSecret(request) {
  return Post(`${urls.subscriptions.billing.paymentProviders.stripe.setupIntents.v1}`, request);
}
var init_stripe = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/providers/stripe/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/providers/index.js
var init_providers = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/providers/index.js"() {
    init_stripe();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/summaries.js
async function getSubscriptionSummaries(tenantId) {
  return Get(`${urls.subscriptions.billing.summaries.v1}/${tenantId}`);
}
var init_summaries = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/summaries.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/tenantConfiguration.js
async function getTenantConfiguration(tenantId) {
  return Get(`${urls.subscriptions.billing.tenantConfiguration.v1}/${tenantId}`);
}
async function createTenantConfiguration(request) {
  return Post(`${urls.subscriptions.billing.tenantConfiguration.v1}`, request);
}
var init_tenantConfiguration = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/tenantConfiguration.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/paymentProviders.js
async function getPaymentProviders() {
  return Get(urls.subscriptions.paymentProviders.v1);
}
var init_paymentProviders = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/paymentProviders.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/vendorPublicConfigurations.js
async function getVendorPublicConfigurations() {
  return Get(`${urls.subscriptions.billing.configurations.vendorPublicConfigurations.v1}`);
}
var init_vendorPublicConfigurations = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/vendorPublicConfigurations.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/enums.js
var ISubscriptionStatus, PaymentMethodType, ISubscriptionCancellationPolicy, ProviderType, TrialEndAction, TenantCreatedAction;
var init_enums2 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/enums.js"() {
    (function(ISubscriptionStatus2) {
      ISubscriptionStatus2["ACTIVE"] = "active";
      ISubscriptionStatus2["CANCELED"] = "canceled";
      ISubscriptionStatus2["INCOMPLETE"] = "incomplete";
      ISubscriptionStatus2["EXPIRED"] = "expired";
      ISubscriptionStatus2["TRIALING"] = "trialing";
      ISubscriptionStatus2["TRIAL_ENDED"] = "trialEnded";
    })(ISubscriptionStatus || (ISubscriptionStatus = {}));
    (function(PaymentMethodType2) {
      PaymentMethodType2["UNKNWON"] = "unknown";
      PaymentMethodType2["CARD"] = "card";
    })(PaymentMethodType || (PaymentMethodType = {}));
    (function(ISubscriptionCancellationPolicy2) {
      ISubscriptionCancellationPolicy2["AT_PERIOD_END"] = "atPeriodEnd";
    })(ISubscriptionCancellationPolicy || (ISubscriptionCancellationPolicy = {}));
    (function(ProviderType2) {
      ProviderType2["Stripe"] = "Stripe";
    })(ProviderType || (ProviderType = {}));
    (function(TrialEndAction2) {
      TrialEndAction2["CHANGE_TO_DEFAULT"] = "change_to_default";
      TrialEndAction2["RETAIN_TRIAL"] = "retain_trial";
    })(TrialEndAction || (TrialEndAction = {}));
    (function(TenantCreatedAction2) {
      TenantCreatedAction2["CREATE"] = "create_customer";
    })(TenantCreatedAction || (TenantCreatedAction = {}));
  }
});

// node_modules/@frontegg/rest-api/subscriptions/index.js
var subscriptions_exports = {};
__export(subscriptions_exports, {
  ISubscriptionCancellationPolicy: () => ISubscriptionCancellationPolicy,
  ISubscriptionStatus: () => ISubscriptionStatus,
  PaymentMethodType: () => PaymentMethodType,
  ProviderType: () => ProviderType,
  TenantCreatedAction: () => TenantCreatedAction,
  TrialEndAction: () => TrialEndAction,
  cancelManagedSubscription: () => cancelManagedSubscription,
  cancelSubscription: () => cancelSubscription,
  createStripeCustomer: () => createStripeCustomer,
  createStripePaymentMethodSetupIntentSecret: () => createStripePaymentMethodSetupIntentSecret,
  createSubscription: () => createSubscription,
  createTenantConfiguration: () => createTenantConfiguration,
  getManagedSubscription: () => getManagedSubscription,
  getManagedSubscriptions: () => getManagedSubscriptions,
  getPaymentMethod: () => getPaymentMethod,
  getPaymentMethods: () => getPaymentMethods,
  getPaymentProviders: () => getPaymentProviders,
  getStripeCustomer: () => getStripeCustomer,
  getStripePaymentProviderConfiguration: () => getStripePaymentProviderConfiguration,
  getSubscription: () => getSubscription,
  getSubscriptionInvoice: () => getSubscriptionInvoice,
  getSubscriptionInvoicePdf: () => getSubscriptionInvoicePdf,
  getSubscriptionInvoices: () => getSubscriptionInvoices,
  getSubscriptionPlan: () => getSubscriptionPlan,
  getSubscriptionPlans: () => getSubscriptionPlans,
  getSubscriptionSummaries: () => getSubscriptionSummaries,
  getSubscriptions: () => getSubscriptions,
  getTenantConfiguration: () => getTenantConfiguration,
  getVendorPublicConfigurations: () => getVendorPublicConfigurations,
  renewManagedSubscription: () => renewManagedSubscription,
  renewSubscription: () => renewSubscription,
  updateManagedSubscription: () => updateManagedSubscription,
  updatePaymentMethodBillingDetails: () => updatePaymentMethodBillingDetails,
  updateSubscription: () => updateSubscription
});
var init_subscriptions2 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/index.js"() {
    init_subscriptions();
    init_managedSubscriptions();
    init_plans();
    init_invoices();
    init_paymentMethods();
    init_providers();
    init_summaries();
    init_tenantConfiguration();
    init_paymentProviders();
    init_vendorPublicConfigurations();
    init_enums2();
  }
});

// node_modules/@frontegg/rest-api/vendor/index.js
var vendor_exports = {};
__export(vendor_exports, {
  getVendorPublicInfo: () => getVendorPublicInfo
});
async function getVendorPublicInfo() {
  return Get(`${urls.vendor}/public`);
}
var init_vendor = __esm({
  "node_modules/@frontegg/rest-api/vendor/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/sub-tenants/index.js
var sub_tenants_exports = {};
__export(sub_tenants_exports, {
  addUserRolesForSubTenants: () => addUserRolesForSubTenants,
  addUserToTenantAndSubTenants: () => addUserToTenantAndSubTenants,
  addUsersToSubTenant: () => addUsersToSubTenant,
  createSubTenant: () => createSubTenant,
  deleteSubTenant: () => deleteSubTenant,
  loadAllUsers: () => loadAllUsers,
  removeUserFromTenantAndSubTenants: () => removeUserFromTenantAndSubTenants,
  removeUserRolesFromSubTenants: () => removeUserRolesFromSubTenants,
  setUserRolesForSubTenants: () => setUserRolesForSubTenants,
  updateSubAccountAccess: () => updateSubAccountAccess,
  updateSubTenant: () => updateSubTenant
});
async function loadAllUsers(params) {
  return Get(urls.identity.subTenants.v1, params);
}
async function addUserToTenantAndSubTenants(body) {
  return Post(urls.identity.subTenants.v1, body);
}
async function removeUserFromTenantAndSubTenants(body, options) {
  return Delete(urls.identity.subTenants.v1, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function addUserRolesForSubTenants(userId, body, options) {
  return Post(`${urls.identity.subTenants.v1}/${userId}/roles`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function removeUserRolesFromSubTenants(userId, body, options) {
  return Delete(`${urls.identity.subTenants.v1}/${userId}/roles`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function setUserRolesForSubTenants(userId, body, options) {
  return Patch(`${urls.identity.subTenants.v1}/${userId}/roles`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function createSubTenant(body, options) {
  return Post(urls.tenants.subTenants.v1, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function deleteSubTenant(tenantId, options) {
  return Delete(`${urls.tenants.subTenants.v1}/${tenantId}`, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function updateSubTenant({
  tenantId
}, body, options) {
  return Patch(`${urls.tenants.subTenants.v1}/${tenantId}`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function updateSubAccountAccess(userId, body, options) {
  return Put(`${urls.identity.subTenants.v1}/${userId}/access`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function addUsersToSubTenant(body, options) {
  return Post(`${urls.identity.subTenants.v2}/`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
var init_sub_tenants = __esm({
  "node_modules/@frontegg/rest-api/sub-tenants/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/directory/index.js
var directory_exports = {};
__export(directory_exports, {
  countConfigurationUsers: () => countConfigurationUsers,
  createConfiguration: () => createConfiguration,
  deleteConfiguration: () => deleteConfiguration,
  getConfigs: () => getConfigs,
  updateConfiguration: () => updateConfiguration
});
async function getConfigs() {
  return Get(`${urls.directory.v1}`);
}
async function updateConfiguration(id, body) {
  return Patch(`${urls.directory.v1}/${id}`, body);
}
async function createConfiguration(body) {
  return Post(`${urls.directory.v1}`, body);
}
async function deleteConfiguration(id) {
  return Delete(`${urls.directory.v1}/${id}`);
}
async function countConfigurationUsers(id) {
  return Get(`${urls.directory.temp}/${id}/Users/count`);
}
var init_directory = __esm({
  "node_modules/@frontegg/rest-api/directory/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/impersonate/index.js
var impersonate_exports = {};
__export(impersonate_exports, {
  impersonate: () => impersonate
});
async function impersonate(body) {
  return Post(`${urls.identity.impersonate.v1}`, body);
}
var init_impersonate = __esm({
  "node_modules/@frontegg/rest-api/impersonate/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/groups/index.js
var groups_exports = {};
__export(groups_exports, {
  addRolesToGroup: () => addRolesToGroup,
  addUsersToGroup: () => addUsersToGroup,
  createGroup: () => createGroup,
  deleteGroup: () => deleteGroup,
  deleteRolesFromGroup: () => deleteRolesFromGroup,
  deleteUsersFromGroup: () => deleteUsersFromGroup,
  getGroupById: () => getGroupById,
  getGroupConfiguration: () => getGroupConfiguration,
  getGroups: () => getGroups,
  getGroupsByIds: () => getGroupsByIds,
  updateGroup: () => updateGroup,
  updateGroupConfiguration: () => updateGroupConfiguration
});
async function getGroupById({
  groupId
}, query) {
  return Get(`${urls.identity.groups.v1}/${groupId}`, _extends({}, query));
}
async function getGroups(query) {
  return Get(`${urls.identity.groups.v1}`, _extends({}, query));
}
async function getGroupsByIds(body, params) {
  return Post(`${urls.identity.groups.getByIds.v1}`, body, {
    params
  });
}
async function createGroup(body) {
  return Post(`${urls.identity.groups.v1}`, body);
}
async function updateGroup(_ref) {
  let {
    groupId
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded9);
  return Patch(`${urls.identity.groups.v1}/${groupId}`, body);
}
async function deleteGroup(groupId) {
  return Delete(`${urls.identity.groups.v1}/${groupId}`);
}
async function addRolesToGroup(groupId, body) {
  return Post(`${urls.identity.groups.v1}/${groupId}/roles`, body);
}
async function deleteRolesFromGroup(groupId, body) {
  return Delete(`${urls.identity.groups.v1}/${groupId}/roles`, body);
}
async function addUsersToGroup(groupId, body) {
  return Post(`${urls.identity.groups.v1}/${groupId}/users`, body);
}
async function deleteUsersFromGroup(groupId, body) {
  return Delete(`${urls.identity.groups.v1}/${groupId}/users`, body);
}
async function getGroupConfiguration() {
  return Get(`${urls.identity.groups.configurations.v1}`);
}
async function updateGroupConfiguration(body) {
  return Post(`${urls.identity.groups.configurations.v1}`, body);
}
var _excluded9;
var init_groups = __esm({
  "node_modules/@frontegg/rest-api/groups/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_constants();
    init_fetch();
    _excluded9 = ["groupId"];
  }
});

// node_modules/@frontegg/rest-api/security-center/index.js
var security_center_exports = {};
__export(security_center_exports, {
  getInsights: () => getInsights,
  getRecommendations: () => getRecommendations
});
async function getRecommendations() {
  return Get(urls.securityCenter.recommendations.v1);
}
async function getInsights() {
  return Get(urls.securityCenter.insights.v1);
}
var init_security_center = __esm({
  "node_modules/@frontegg/rest-api/security-center/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/user-phone-numbers/index.js
var user_phone_numbers_exports = {};
__export(user_phone_numbers_exports, {
  createPhoneNumber: () => createPhoneNumber,
  deletePhoneNumber: () => deletePhoneNumber,
  getUserPhoneNumbers: () => getUserPhoneNumbers,
  preVerifyPhoneNumber: () => preVerifyPhoneNumber,
  verifyDeletePhoneNumber: () => verifyDeletePhoneNumber,
  verifyPhoneNumber: () => verifyPhoneNumber
});
async function getUserPhoneNumbers(queryParams) {
  return Get(`${urls.identity.phoneNumbers.v1}`, queryParams);
}
async function createPhoneNumber(body) {
  return Post(`${urls.identity.phoneNumbers.v1}`, body);
}
async function deletePhoneNumber(phoneId) {
  return Delete(`${urls.identity.phoneNumbers.v1}/${phoneId}`);
}
async function preVerifyPhoneNumber(body) {
  return Post(`${urls.identity.phoneNumbers.v1}/preverify`, body);
}
async function verifyPhoneNumber(body) {
  return Post(`${urls.identity.phoneNumbers.v1}/verify`, body);
}
async function verifyDeletePhoneNumber(phoneId, body) {
  return Post(`${urls.identity.phoneNumbers.v1}/${phoneId}/delete/verify`, body);
}
var init_user_phone_numbers = __esm({
  "node_modules/@frontegg/rest-api/user-phone-numbers/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/teams/interfaces.js
var UserManagedByEnum;
var init_interfaces5 = __esm({
  "node_modules/@frontegg/rest-api/teams/interfaces.js"() {
    (function(UserManagedByEnum2) {
      UserManagedByEnum2["FRONTEGG"] = "frontegg";
      UserManagedByEnum2["SCIM2"] = "scim2";
    })(UserManagedByEnum || (UserManagedByEnum = {}));
  }
});

// node_modules/@frontegg/rest-api/metadata/interfaces.js
var init_interfaces6 = __esm({
  "node_modules/@frontegg/rest-api/metadata/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/reports/interfaces.js
var init_interfaces7 = __esm({
  "node_modules/@frontegg/rest-api/reports/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/connectivity/interfaces.js
var init_interfaces8 = __esm({
  "node_modules/@frontegg/rest-api/connectivity/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/notifications/interfaces.js
var init_interfaces9 = __esm({
  "node_modules/@frontegg/rest-api/notifications/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/audits/interfaces.js
var init_interfaces10 = __esm({
  "node_modules/@frontegg/rest-api/audits/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/tenants/interfaces.js
var TenantSortByEnum, TenantType;
var init_interfaces11 = __esm({
  "node_modules/@frontegg/rest-api/tenants/interfaces.js"() {
    (function(TenantSortByEnum2) {
      TenantSortByEnum2["createdAt"] = "createdAt";
      TenantSortByEnum2["name"] = "name";
      TenantSortByEnum2["tenantId"] = "tenantId";
    })(TenantSortByEnum || (TenantSortByEnum = {}));
    (function(TenantType2) {
      TenantType2["CUSTOMER"] = "customer";
      TenantType2["SPAM"] = "spam";
      TenantType2["TEST"] = "test";
      TenantType2["RESELLER"] = "reseller";
      TenantType2["HEADQUARTER"] = "headquarter";
    })(TenantType || (TenantType = {}));
  }
});

// node_modules/@frontegg/rest-api/account-settings/interfaces.js
var init_interfaces12 = __esm({
  "node_modules/@frontegg/rest-api/account-settings/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/roles/interfaces.js
var PermissionAssignmentTypeEnum;
var init_interfaces13 = __esm({
  "node_modules/@frontegg/rest-api/roles/interfaces.js"() {
    (function(PermissionAssignmentTypeEnum2) {
      PermissionAssignmentTypeEnum2["NEVER"] = "NEVER";
      PermissionAssignmentTypeEnum2["ALWAYS"] = "ALWAYS";
      PermissionAssignmentTypeEnum2["ASSIGNABLE"] = "ASSIGNABLE";
    })(PermissionAssignmentTypeEnum || (PermissionAssignmentTypeEnum = {}));
  }
});

// node_modules/@frontegg/rest-api/subscriptions/providers/stripe/interfaces.js
var init_interfaces14 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/providers/stripe/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/subscriptions/interfaces.js
var init_interfaces15 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/interfaces.js"() {
    init_interfaces14();
  }
});

// node_modules/@frontegg/rest-api/vendor/interfaces.js
var init_interfaces16 = __esm({
  "node_modules/@frontegg/rest-api/vendor/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/sub-tenants/interfaces.js
var init_interfaces17 = __esm({
  "node_modules/@frontegg/rest-api/sub-tenants/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/routers.js
var fronteggAuthApiRoutesRegex, fronteggRefreshTokenUrl, fronteggSilentRefreshTokenUrl, fronteggUsersUrl, fronteggTenantsUrl, fronteggTenantsV3Url;
var init_routers = __esm({
  "node_modules/@frontegg/rest-api/routers.js"() {
    init_constants();
    fronteggAuthApiRoutesRegex = [/^(.*)\/logout$/g, "/logout", /^\/identity\/resources\/auth\/v[0-9]*\/user\/[^\/]*\/postlogin$/g, /^\/identity\/resources\/auth\/v[0-9]*\/passwordless\/[^\/]*\/postlogin$/g, /^\/identity\/resources\/auth\/v[0-9]*\/webauthn\/postlogin$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user\/token\/refresh$/g, /^\/identity\/resources\/users\/v[0-9]*$/g, /^\/identity\/resources\/users\/v[0-9]*\/signUp$/g, /^\/identity\/resources\/users\/v[0-9]*\/activate$/g, /^\/identity\/resources\/users\/v[0-9]*\/invitation\/accept$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user\/mfa\/verify$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user\/mfa\/[^\/]*\/[^\/]*\/verify$/g, /^\/oauth\/token$/g, /^\/oauth\/authorize\/silent$/g];
    fronteggRefreshTokenUrl = `${urls.identity.auth.v1}/user/token/refresh`;
    fronteggSilentRefreshTokenUrl = `${urls.oauth.v1}/authorize/silent`;
    fronteggUsersUrl = `${urls.identity.users.v2}/me`;
    fronteggTenantsUrl = `${urls.identity.users.v2}/me/tenants`;
    fronteggTenantsV3Url = `${urls.identity.users.v3}/me/tenants`;
  }
});

// node_modules/@frontegg/rest-api/feature-flags/interfaces.js
var init_interfaces18 = __esm({
  "node_modules/@frontegg/rest-api/feature-flags/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/directory/interfaces.js
var ScimConnectionSource;
var init_interfaces19 = __esm({
  "node_modules/@frontegg/rest-api/directory/interfaces.js"() {
    (function(ScimConnectionSource2) {
      ScimConnectionSource2["FRONTEGG"] = "frontegg";
      ScimConnectionSource2["OKTA"] = "okta";
      ScimConnectionSource2["AZURE_AD"] = "azure-ad";
      ScimConnectionSource2["OTHER"] = "other";
    })(ScimConnectionSource || (ScimConnectionSource = {}));
  }
});

// node_modules/@frontegg/rest-api/impersonate/interfaces.js
var init_interfaces20 = __esm({
  "node_modules/@frontegg/rest-api/impersonate/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/groups/interfaces.js
var init_interfaces21 = __esm({
  "node_modules/@frontegg/rest-api/groups/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/groups/enums.js
var GroupRelations, GroupManagedByEnum;
var init_enums3 = __esm({
  "node_modules/@frontegg/rest-api/groups/enums.js"() {
    (function(GroupRelations2) {
      GroupRelations2["roles"] = "roles";
      GroupRelations2["users"] = "users";
      GroupRelations2["rolesAndUsers"] = "rolesAndUsers";
    })(GroupRelations || (GroupRelations = {}));
    (function(GroupManagedByEnum2) {
      GroupManagedByEnum2["FRONTEGG"] = "frontegg";
      GroupManagedByEnum2["SCIM2"] = "scim2";
    })(GroupManagedByEnum || (GroupManagedByEnum = {}));
  }
});

// node_modules/@frontegg/rest-api/users/interfaces.js
var SortByEnum, GetUsersFilterPreset, providersArray;
var init_interfaces22 = __esm({
  "node_modules/@frontegg/rest-api/users/interfaces.js"() {
    (function(SortByEnum2) {
      SortByEnum2["createdAt"] = "createdAt";
      SortByEnum2["name"] = "name";
      SortByEnum2["email"] = "email";
      SortByEnum2["id"] = "id";
      SortByEnum2["verified"] = "verified";
      SortByEnum2["isLocked"] = "isLocked";
      SortByEnum2["provider"] = "provider";
      SortByEnum2["tenantId"] = "tenantId";
    })(SortByEnum || (SortByEnum = {}));
    (function(GetUsersFilterPreset2) {
      GetUsersFilterPreset2["MFA_UNENROLLED"] = "mfa-unenrolled";
      GetUsersFilterPreset2["BREACHED_PASSWORDS"] = "breached-passwords";
      GetUsersFilterPreset2["INACTIVE"] = "inactive";
    })(GetUsersFilterPreset || (GetUsersFilterPreset = {}));
    providersArray = ["local", "saml", "google", "github", "facebook", "microsoft", "scim2", "slack"];
  }
});

// node_modules/@frontegg/rest-api/security-center/interfaces.js
var RecommendationCode, InsightCode, RecommendationActionKey, RecommendationSeverity, SecurityCategory;
var init_interfaces23 = __esm({
  "node_modules/@frontegg/rest-api/security-center/interfaces.js"() {
    (function(RecommendationCode2) {
      RecommendationCode2["FORCE_MFA"] = "FORCE_MFA";
      RecommendationCode2["BREACHED_PASSWORDS_EXIST"] = "BREACHED_PASSWORDS_EXIST";
      RecommendationCode2["ENABLE_USER_LOCKOUT"] = "ENABLE_USER_LOCKOUT";
      RecommendationCode2["STRENGTHEN_USER_LOCKOUT"] = "STRENGTHEN_USER_LOCKOUT";
      RecommendationCode2["ENABLE_PASSWORD_HISTORY"] = "ENABLE_PASSWORD_HISTORY";
      RecommendationCode2["STRENGTHEN_PASSWORD_HISTORY"] = "STRENGTHEN_PASSWORD_HISTORY";
      RecommendationCode2["ENABLE_FORCE_RELOGIN"] = "ENABLE_FORCE_RELOGIN";
      RecommendationCode2["SET_FORCE_RELOGIN"] = "SET_FORCE_RELOGIN";
      RecommendationCode2["ENABLE_SESSION_CONCURRENCY"] = "ENABLE_SESSION_CONCURRENCY";
      RecommendationCode2["SET_SESSION_CONCURRENCY"] = "SET_SESSION_CONCURRENCY";
      RecommendationCode2["ENABLE_IDLE_SESSION"] = "ENABLE_IDLE_SESSION";
      RecommendationCode2["SET_IDLE_SESSION"] = "SET_IDLE_SESSION";
      RecommendationCode2["ENABLE_IP_RESTRICTIONS"] = "ENABLE_IP_RESTRICTIONS";
      RecommendationCode2["CHANGE_IP_TO_ALLOWLIST"] = "CHANGE_IP_TO_ALLOWLIST";
      RecommendationCode2["ENABLE_DOMAIN_RESTRICTIONS"] = "ENABLE_DOMAIN_RESTRICTIONS";
      RecommendationCode2["CHANGE_DOMAIN_TO_ALLOWLIST"] = "CHANGE_DOMAIN_TO_ALLOWLIST";
      RecommendationCode2["CONFIGURE_SSO"] = "CONFIGURE_SSO";
    })(RecommendationCode || (RecommendationCode = {}));
    (function(InsightCode2) {
      InsightCode2["MFA_FORCED"] = "MFA_FORCED";
      InsightCode2["PARTIALLY_FORCED_MFA"] = "PARTIALLY_FORCED_MFA";
      InsightCode2["PARTIAL_MFA_USAGE"] = "PARTIAL_MFA_USAGE";
      InsightCode2["FULL_MFA_USAGE"] = "FULL_MFA_USAGE";
      InsightCode2["BREACHED_PASSWORD_USERS_EXIST"] = "BREACHED_PASSWORD_USERS_EXIST";
      InsightCode2["IMPROVE_LOCKOUT_POLICY"] = "IMPROVE_LOCKOUT_POLICY";
      InsightCode2["IMPROVE_PASSWORD_HISTORY_POLICY"] = "IMPROVE_PASSWORD_HISTORY_POLICY";
      InsightCode2["NO_SESSION_SETTINGS"] = "NO_SESSION_SETTINGS";
      InsightCode2["PARTIAL_SESSION_SETTINGS"] = "PARTIAL_SESSION_SETTINGS";
      InsightCode2["FULL_SESSION_SETTINGS"] = "FULL_SESSION_SETTINGS";
      InsightCode2["NO_IP_RESTRICTIONS"] = "NO_IP_RESTRICTIONS";
      InsightCode2["IP_ALLOWLIST"] = "IP_ALLOWLIST";
      InsightCode2["IP_DENYLIST"] = "IP_DENYLIST";
      InsightCode2["NO_DOMAIN_RESTRICTIONS"] = "NO_DOMAIN_RESTRICTIONS";
      InsightCode2["DOMAIN_ALLOWLIST"] = "DOMAIN_ALLOWLIST";
      InsightCode2["DOMAIN_DENYLIST"] = "DOMAIN_DENYLIST";
      InsightCode2["FULL_PASSWORD_SETTINGS"] = "FULL_PASSWORD_SETTINGS";
    })(InsightCode || (InsightCode = {}));
    (function(RecommendationActionKey2) {
      RecommendationActionKey2["SEND_RESET_BREACHED_PASSWORD_EMAIL"] = "SEND_RESET_BREACHED_PASSWORD_EMAIL";
      RecommendationActionKey2["ADJUST_FORCE_RELOGIN"] = "ADJUST_FORCE_RELOGIN";
      RecommendationActionKey2["ADJUST_MAX_CONCURRENT_SESSIONS"] = "ADJUST_MAX_CONCURRENT_SESSIONS";
      RecommendationActionKey2["ADJUST_IDLE_TIMEOUT"] = "ADJUST_IDLE_TIMEOUT";
    })(RecommendationActionKey || (RecommendationActionKey = {}));
    (function(RecommendationSeverity2) {
      RecommendationSeverity2["SEVERE"] = "SEVERE";
      RecommendationSeverity2["WARNING"] = "WARNING";
      RecommendationSeverity2["INFO"] = "INFO";
    })(RecommendationSeverity || (RecommendationSeverity = {}));
    (function(SecurityCategory2) {
      SecurityCategory2["MFA"] = "MFA";
      SecurityCategory2["SESSIONS"] = "SESSIONS";
      SecurityCategory2["PASSWORD"] = "PASSWORD";
      SecurityCategory2["INACTIVITY"] = "INACTIVITY";
      SecurityCategory2["IP"] = "IP";
      SecurityCategory2["DOMAIN"] = "DOMAIN";
      SecurityCategory2["SSO"] = "SSO";
    })(SecurityCategory || (SecurityCategory = {}));
  }
});

// node_modules/@frontegg/rest-api/user-phone-numbers/interfaces.js
var init_interfaces24 = __esm({
  "node_modules/@frontegg/rest-api/user-phone-numbers/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/index.js
var rest_api_exports = {};
__export(rest_api_exports, {
  ADMIN_PORTAL_ENTITLEMENTS_FF: () => ADMIN_PORTAL_ENTITLEMENTS_FF,
  AuthStrategyEnum: () => AuthStrategyEnum,
  ContextHolder: () => ContextHolder,
  FeatureFlags: () => FeatureFlags,
  FronteggApiError: () => FronteggApiError,
  FronteggContext: () => FronteggContext,
  FronteggFrameworks: () => FronteggFrameworks,
  GetUsersFilterPreset: () => GetUsersFilterPreset,
  GroupManagedByEnum: () => GroupManagedByEnum,
  GroupRelations: () => GroupRelations,
  ISubscriptionCancellationPolicy: () => ISubscriptionCancellationPolicy,
  ISubscriptionStatus: () => ISubscriptionStatus,
  InsightCode: () => InsightCode,
  LOAD_AUTHORIZATION_FF: () => LOAD_AUTHORIZATION_FF,
  MFAStrategyEnum: () => MFAStrategyEnum,
  MachineToMachineAuthStrategy: () => MachineToMachineAuthStrategy,
  NotEntitledJustification: () => NotEntitledJustification,
  PaginationOrderEnum: () => PaginationOrderEnum,
  PaymentMethodType: () => PaymentMethodType,
  PermissionAssignmentTypeEnum: () => PermissionAssignmentTypeEnum,
  ProviderType: () => ProviderType,
  RecommendationActionKey: () => RecommendationActionKey,
  RecommendationCode: () => RecommendationCode,
  RecommendationSeverity: () => RecommendationSeverity,
  RequestSource: () => RequestSource,
  RestrictionType: () => RestrictionType,
  ScimConnectionSource: () => ScimConnectionSource,
  SecondaryAuthStrategy: () => SecondaryAuthStrategy,
  SecurityCategory: () => SecurityCategory,
  SocialLoginProviders: () => SocialLoginProviders,
  SortByEnum: () => SortByEnum,
  TenantSortByEnum: () => TenantSortByEnum,
  TenantType: () => TenantType,
  USE_ENTITLEMENTS_V2_ENDPOINT_FF: () => USE_ENTITLEMENTS_V2_ENDPOINT_FF,
  UserManagedByEnum: () => UserManagedByEnum,
  WebAuthnDeviceType: () => WebAuthnDeviceType,
  api: () => api,
  countConfigurationUsers: () => countConfigurationUsers,
  createConfiguration: () => createConfiguration,
  default: () => rest_api_default,
  deleteConfiguration: () => deleteConfiguration,
  fetch: () => fetch_exports,
  fronteggAuthApiRoutesRegex: () => fronteggAuthApiRoutesRegex,
  fronteggHeaders: () => fronteggHeaders,
  fronteggRefreshTokenUrl: () => fronteggRefreshTokenUrl,
  fronteggSilentRefreshTokenUrl: () => fronteggSilentRefreshTokenUrl,
  fronteggTenantsUrl: () => fronteggTenantsUrl,
  fronteggTenantsV3Url: () => fronteggTenantsV3Url,
  fronteggUsersUrl: () => fronteggUsersUrl,
  getConfigs: () => getConfigs,
  getCurrentUserTenantsFunction: () => getCurrentUserTenantsFunction,
  getTabTenantFromSessionStorage: () => getTabTenantFromSessionStorage,
  loadFeatureFlags: () => loadFeatureFlags,
  providersArray: () => providersArray,
  setTabTenantInSessionStorage: () => setTabTenantInSessionStorage,
  updateConfiguration: () => updateConfiguration
});
var api, rest_api_default;
var init_rest_api = __esm({
  "node_modules/@frontegg/rest-api/index.js"() {
    init_auth();
    init_auth();
    init_teams();
    init_metadata();
    init_reports();
    init_notifications();
    init_audits();
    init_fetch();
    init_connectivity();
    init_tenants();
    init_account_settings();
    init_roles();
    init_subscriptions2();
    init_subscriptions2();
    init_error();
    init_vendor();
    init_sub_tenants();
    init_feature_flags();
    init_directory();
    init_impersonate();
    init_groups();
    init_users();
    init_entitlements();
    init_security_center();
    init_user_phone_numbers();
    init_ContextHolder();
    init_interfaces();
    init_interfaces3();
    init_auth();
    init_interfaces5();
    init_interfaces6();
    init_interfaces7();
    init_interfaces8();
    init_interfaces9();
    init_interfaces10();
    init_interfaces11();
    init_interfaces12();
    init_interfaces13();
    init_interfaces15();
    init_interfaces16();
    init_interfaces17();
    init_routers();
    init_feature_flags();
    init_interfaces18();
    init_directory();
    init_interfaces19();
    init_interfaces20();
    init_interfaces21();
    init_enums3();
    init_interfaces22();
    init_interfaces4();
    init_interfaces23();
    init_interfaces24();
    api = {
      auth: auth_exports,
      teams: teams_exports,
      metadata: metadata_exports,
      reports: reports_exports,
      connectivity: connectivity_exports,
      notifications: notifications_exports,
      audits: audits_exports,
      tenants: tenants_exports,
      accountSettings: account_settings_exports,
      roles: roles_exports,
      subscriptions: subscriptions_exports,
      vendor: vendor_exports,
      subTenants: sub_tenants_exports,
      featureFlags: feature_flags_exports,
      directory: directory_exports,
      impersonate: impersonate_exports,
      groups: groups_exports,
      users: users_exports,
      entitlements: entitlements_exports,
      securityCenter: security_center_exports,
      userPhoneNumbers: user_phone_numbers_exports
    };
    rest_api_default = {
      fetch: fetch_exports,
      ContextHolder,
      FronteggContext,
      api,
      FronteggApiError,
      AuthStrategyEnum,
      MachineToMachineAuthStrategy,
      SocialLoginProviders,
      ISubscriptionCancellationPolicy,
      ISubscriptionStatus,
      PaymentMethodType,
      ProviderType
    };
  }
});

export {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose,
  _extends,
  init_extends,
  ContextHolder,
  FronteggContext,
  fronteggHeaders,
  RequestSource,
  FronteggFrameworks,
  PaginationOrderEnum,
  FronteggApiError,
  fetch_exports,
  USE_ENTITLEMENTS_V2_ENDPOINT_FF,
  FeatureFlags,
  loadFeatureFlags,
  setTabTenantInSessionStorage,
  removeTabTenantFromSessionStorage,
  getTabTenantFromSessionStorage,
  getCurrentUserTenantsFunction,
  SocialLoginProviders,
  AuthStrategyEnum,
  MachineToMachineAuthStrategy,
  RestrictionType,
  SecondaryAuthStrategy,
  WebAuthnDeviceType,
  MFAStrategyEnum,
  LOAD_AUTHORIZATION_FF,
  NotEntitledJustification,
  ADMIN_PORTAL_ENTITLEMENTS_FF,
  init_auth,
  ISubscriptionStatus,
  PaymentMethodType,
  ISubscriptionCancellationPolicy,
  ProviderType,
  getConfigs,
  updateConfiguration,
  createConfiguration,
  deleteConfiguration,
  countConfigurationUsers,
  UserManagedByEnum,
  TenantSortByEnum,
  TenantType,
  PermissionAssignmentTypeEnum,
  fronteggAuthApiRoutesRegex,
  fronteggRefreshTokenUrl,
  fronteggSilentRefreshTokenUrl,
  fronteggUsersUrl,
  fronteggTenantsUrl,
  fronteggTenantsV3Url,
  ScimConnectionSource,
  GroupRelations,
  GroupManagedByEnum,
  SortByEnum,
  GetUsersFilterPreset,
  providersArray,
  RecommendationCode,
  InsightCode,
  RecommendationActionKey,
  RecommendationSeverity,
  SecurityCategory,
  api,
  rest_api_default,
  rest_api_exports,
  init_rest_api
};
/*! Bundled license information:

@frontegg/rest-api/index.js:
  (** @license Frontegg v3.1.64
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=chunk-ZKNYO5Y2.js.map
